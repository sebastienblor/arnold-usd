import system
from build_tools import *
import os
import glob
import shutil
import time
import subprocess
import sys
import signal
import subprocess
from colorama import Fore, Style, Back
import utils
import mayaTestRunner as MTR

Import('env')

if __name__ == 'SCons.Script':
      Import('env BUILD_BASE_DIR MTOA MTOA_SHADERS ')

      # process build targets
      TESTSUITE = []
      TEST_TARGETS = []
      TAGS = []
      PATTERNS = []
      TEST_NAMES = set()

      if system.is_windows:
         test_env = env.Clone(SHLIBPREFIX = '', SHLIBSUFFIX='.dll')
      else:
         test_env = env.Clone(SHLIBPREFIX = '', SHLIBSUFFIX='.so')



      # we need to link against libai for some reason?
      test_env.Append(LIBS = Split('ai'))

      ## make sure we can find any generated programs
      prepend_to_path(test_env, env.subst('$TARGET_LIB_PATH'))
      prepend_to_path(test_env, env.subst('$TARGET_PLUGIN_PATH'))
      ## as well as Arnold executables
      prepend_to_path(test_env, env.subst(test_env['ARNOLD_BINARIES']))
      ## and Maya's
      prepend_to_path(test_env, os.path.join(test_env['MAYA_ROOT'], 'bin'))
      
      listtest_bld = Builder(action = Action(utils.list_tests, "Listing tests..."))
      listtesterrors_bld = Builder(action = Action(utils.list_test_errors, "Listing broken tests..."))
      maketest_bld = Builder(action = Action(utils.make_test, "Creating test '$TARGET'..."))
      testRunner = MTR.MayaTestRunner(maya_version = test_env['MAYA_VERSION_BASE'])
      testrunner_bld = Builder(action = testRunner.run)

      test_env.Append(BUILDERS = {'ListTests' : listtest_bld})
      test_env.Append(BUILDERS = {'ListTestErrors' : listtesterrors_bld})
      test_env.Append(BUILDERS = {'MakeTest' : maketest_bld})
      test_env.Append(BUILDERS = {'Testsuite' : testrunner_bld})
      
      #print test_env['TEST_THREADS']
      ind = -1
         ## First stage. Process build targets, expanding the groups and patterns into single tests
      for target in BUILD_TARGETS:
            ind = ind + 1
            (l, s, r) = strpartition(target, ':')
            if s == ':':
                  BUILD_TARGETS[ind] = l
            # Target "maketest[:testname]", creates a new test in the testsuite (defaults to the next available name in ascending order)
            if l == 'maketest':
                  if r == '':
                     r = utils.get_next_test_name()
                  if r != '':
                     testpath = os.path.abspath(os.path.join('testsuite', 'test_' + r))
                     if os.path.exists(testpath):
                        print "ERROR: Test %s already exists!" % r
                     else:
                        MAKETEST = test_env.MakeTest(testpath, None)
                        test_env.Alias(target, MAKETEST)
                        test_env.AlwaysBuild(MAKETEST)
            elif l == 'testlist':
                  if r == '':
                     testlist = glob.glob(os.path.join('testsuite', env['TEST_PATTERN']))
                     SRC = []
                     GUI_LIST = utils.find_test_group('gui')

                     for fullName in testlist:
                        name = os.path.basename(fullName)
                        if name in GUI_LIST and (not system.is_windows):
                              continue
                        SRC += [os.path.join(name, 'README')]
                  else:
                     tags = r.split(',')
                     SRC = []
                     for tag in tags:
                        TEST_GROUP = utils.find_test_group(tag)
                        if len(TEST_GROUP) == 0:
                              print "WARNING: No tests related to tag \"%s\"" % tag
                        else:
                              for test in TEST_GROUP:
                                 SRC += [os.path.join(test, 'README')]
                  SRC.sort()
                  TESTLIST = test_env.ListTests(target, SRC)
                  test_env.Alias(target, TESTLIST)
                  test_env.AlwaysBuild(TESTLIST)
            elif l == 'testerrors':
                  testlist = glob.glob(os.path.join(BUILD_BASE_DIR, 'testsuite', 'test_*'))
                  SRC = []
                  for name in testlist:
                     SRC += [os.path.join(os.path.basename(name), 'STATUS')]
                  SRC.sort()
                  TESTLIST = test_env.ListTestErrors(target, SRC)
                  test_env.Alias(target, TESTLIST)
                  test_env.AlwaysBuild(TESTLIST)
            elif l == 'testsuite':
                  if r == '':
                     # Special 'testsuite' target is expanded to the whole testsuite, filtered by the value of TEST_PATTERN
                     PATTERNS += [env['TEST_PATTERN']]
                     testlist = glob.glob(os.path.join('testsuite', env['TEST_PATTERN']))
                     GUI_LIST = utils.find_test_group('gui')
                     for fullName in testlist:
                        name = os.path.basename(fullName)
                        if name in GUI_LIST and (not system.is_windows):
                              print "Skipping GUI test \"%s\"" % name
                              continue
                        testRunner.add_test(name, env)
                  else:
                     # Target "testsuite:tag[,tag...]", runs all tests related to the given tag(s)
                     tags = r.split(',')
                     for tag in tags:
                        TEST_GROUP = find_test_group(tag)
                        if len(TEST_GROUP) == 0:
                              print "WARNING: No tests related to tag \"%s\"" % tag
                        else:
                              TAGS += [tag]
                              for name in TEST_GROUP:
                                 testRunner.add_test(name)
            else:
                  if s != ':' and target.startswith('test_'):
                     # Expand test patterns
                     l = glob.glob(os.path.join('testsuite', target))
                     if len(l) == 1 and os.path.basename(l[0]) == target:
                        testRunner.add_test(l[0])
                     elif len(l) == 0:
                        print "WARNING: No tests matching expression \"%s\"" % target
                     else:
                        PATTERNS += [target]
                        for name in l:
                              name = os.path.basename(name)
                              testRunner.add_test(name)
      
      #for test in testRunner.tests:
      #   try:
      #      index = BUILD_TARGETS.index(test)
      #      BUILD_TARGETS.pop(index)Z
      #  except ValueError:
      #      pass
      
      if testRunner.tests:
        BUILD_TARGETS += ["testsuite"]
        TESTSUITE = testRunner.create_job(test_env)
      
      
      print "Cool ya"
      Return('TESTSUITE')


