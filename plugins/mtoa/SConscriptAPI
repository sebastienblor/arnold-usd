# vim: filetype=python

## load our own python modules
import system

import os
from build_tools import find_files_recursive, get_maya_version
from distutils import sysconfig
from shutil import copyfile

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
include_files = []
for subdir in ['attributes', 'common', 'extension', 'platform', 'utils', 'session', 'render', 'scene' ]:
   dir = os.path.join(src_base_dir, subdir)
   source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]
   include_files += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.h'])]

#Add files to be exported by the API from 'nodes' and 'translators' folder
source_files_add = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldProceduralNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardSurfaceNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardHairNode.cpp'),
					os.path.join('nodes', 'shader', 'ArnoldSkinShaderNode.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'AutoCameraTranslator.cpp'),                    
                    os.path.join('translators', 'camera', 'ImagePlaneTranslator.cpp'),                    
                    os.path.join('translators', 'driver', 'DriverTranslator.cpp'),
                    os.path.join('translators', 'filter', 'FilterTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShadingEngineTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'AutoDagTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslatorImpl.cpp'),
                    os.path.join('translators', 'DagTranslator.cpp'),
                    os.path.join('translators', 'ObjectSetTranslator.cpp')]

source_files_rem =  [os.path.join('render', 'BatchProgressDriver.cpp'), os.path.join('utils', 'DrawUtils.cpp')]

for file_rem in source_files_rem:
    source_files.remove(file_rem)
  
source_files += source_files_add

local_env.Append(CPPPATH = [sysconfig.get_python_inc()])



MAYA_ROOT = local_env.subst(local_env['MAYA_ROOT'])
MAYA_INCLUDE_PATH = local_env.subst(local_env['MAYA_INCLUDE_PATH'])
if MAYA_INCLUDE_PATH == '.':
    if system.os() == 'darwin':
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, '../../devkit/include')
    else:
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, 'include')
# check in Maya directory if the tar.gz has been extracted

maya_version = get_maya_version(os.path.join(MAYA_INCLUDE_PATH, 'maya', 'MTypes.h'))
maya_version_base = maya_version[0:4]

mayaQtFolder = ""
mayaQtTarGz = ""

MTOA_EXTERNAL_PATH = local_env.subst(local_env['EXTERNAL_PATH'])

if (int(maya_version_base) == 2014):
    if system.os() == 'darwin':
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.2-include')
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.2-include.tar.gz')
    else:
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.2-64-include')
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.2-64-include.tar.gz')
elif (int(maya_version_base) == 2015):
    mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.5-include')
    mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.5-include.tar.gz')
elif (int(maya_version_base) == 2016):
    mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.6-include') 
    mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.6-include.tar.gz')
elif (int(maya_version_base) == 2017):
    mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-5.6.1-include') 
    mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-5.6.1-include.tar.gz')
else:
    mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-5.6.1-include') 
    mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-5.6.1-include.tar.gz')


if not os.path.isdir(mayaQtFolder):
    if os.path.exists(mayaQtTarGz):
        print "Extracting Qt Files..."
        import tarfile
        tfile = tarfile.open(mayaQtTarGz, 'r:gz')
        tfile.extractall(mayaQtFolder)
    else:
        print "Error : Qt Files not Found"

local_env['QT_ROOT_DIR'] = mayaQtFolder

local_env.Append(CPPPATH = [mayaQtFolder])
print 'Qt includes in ' + mayaQtFolder

if system.os() == 'darwin':
    maya_qt_lib_dir = os.path.join(MAYA_ROOT, 'MacOS')
    if (int(maya_version_base) <= 2016):
        qt_lib_dir = os.path.join(MTOA_EXTERNAL_PATH, 'QtLibs', maya_version_base)
        if not os.path.isdir(qt_lib_dir):
            os.makedirs(qt_lib_dir)

        copyfile(os.path.join(maya_qt_lib_dir, 'QtCore'), os.path.join(qt_lib_dir, 'libQtCore.dylib'))
        copyfile(os.path.join(maya_qt_lib_dir, 'QtGui'), os.path.join(qt_lib_dir, 'libQtGui.dylib'))
        copyfile(os.path.join(maya_qt_lib_dir, 'QtOpenGL'), os.path.join(qt_lib_dir, 'libQtOpenGL.dylib'))
    else:
        qt_lib_dir = maya_qt_lib_dir

else:
    qt_lib_dir = os.path.join(MAYA_ROOT, 'lib')
local_env.Append(LIBPATH = [qt_lib_dir])
print 'Qt libraries in ' + qt_lib_dir

if system.os() == 'windows':
    if (int(maya_version_base) <= 2016):
        local_env.Append(LIBS = ['QtCore4.lib', 'QtGui4.lib', 'QtOpenGL4.lib'])
    else:
        if local_env['MODE'] == 'debug':
            local_env.Append(LIBS = ['Qt5Core.lib', 'Qt5Gui.lib', 'Qt5OpenGL.lib', 'Qt5Widgets.lib'])
        else:
            local_env.Append(LIBS = ['Qt5Core.lib', 'Qt5Gui.lib', 'Qt5OpenGL.lib', 'Qt5Widgets.lib'])
elif system.os() == 'linux':
    if (int(maya_version_base) <= 2016):
        local_env.Append(LIBS = ['QtCore', 'QtGui', 'QtOpenGL'])
    else:
        local_env.Append(LIBS = ['Qt5Core', 'Qt5Gui', 'Qt5OpenGL', 'Qt5Widgets'])
else:
    if (int(maya_version_base) <= 2016):
        local_env.Append(LIBS = ['QtCore', 'QtGui', 'QtOpenGL'])
    else:
        local_env.Append(LIBS = ['Qt5Core.5', 'Qt5Gui.5', 'Qt5OpenGL.5', 'Qt5Widgets.5'])

if not local_env['MTOA_DISABLE_RV']:
    renderViewIncludeFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'include')
    renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', maya_version_base)


    local_env.Append(LIBPATH = [renderViewLibFolder])
    local_env.Append(CPPPATH = [renderViewIncludeFolder])

    if system.os() == 'windows':
        local_env.Append(LIBS = ['ai_renderview.lib'])
    else:
        local_env.Append(LIBS = ['ai_renderview'])

 

MTOA_API = local_env.SharedLibrary('mtoa_api', source_files)


if system.os() == 'darwin':
    local_env.Append(CPPDEFINES = Split('DARWIN'))
    local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
    local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')

Return('MTOA_API')
