# vim: filetype=python

## load our own python modules
import utils.system as system

import os
from utils.build_tools import find_files_recursive
from utils.mtoa_build_tools import get_maya_version
from distutils import sysconfig
from shutil import copyfile

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
include_files = []
for subdir in ['attributes', 'common', 'extension', 'platform', 'utils', 'session', 'render', 'scene' ]:
   dir = os.path.join(src_base_dir, subdir)
   source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]
   include_files += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.h'])]

#Add files to be exported by the API from 'nodes' and 'translators' folder
source_files_add = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldBaseProcedural.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldProceduralNode.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldDrawGeometry.cpp'),
                    os.path.join('nodes', 'shape', 'PolyTriangulator.cpp'),
                    os.path.join('nodes', 'ArnoldOperatorNode.cpp'),
                    os.path.join('nodes', 'ArnoldImagerNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardSurfaceNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardHairNode.cpp'),
					os.path.join('nodes', 'shader', 'ArnoldSkinShaderNode.cpp'),
                    os.path.join('viewport2', 'ArnoldProceduralSubSceneOverride.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'AutoCameraTranslator.cpp'),                    
                    os.path.join('translators', 'camera', 'ImagePlaneTranslator.cpp'),                    
                    os.path.join('translators', 'driver', 'DriverTranslator.cpp'),
                    os.path.join('translators', 'filter', 'FilterTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShadingEngineTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ProceduralTranslator.cpp'),
                    os.path.join('translators', 'shape', 'AutoProceduralTranslator.cpp'),
                    os.path.join('translators', 'operator', 'OperatorTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerLightMixerTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerColorCurvesTranslator.cpp'),
                    os.path.join('translators', 'AutoDagTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslatorImpl.cpp'),
                    os.path.join('translators', 'DagTranslator.cpp'),
                    os.path.join('translators', 'ObjectSetTranslator.cpp')]

source_files_rem =  [os.path.join('utils', 'DrawUtils.cpp'), os.path.join('utils', 'ConstantStrings.cpp')]

for file_rem in source_files_rem:
    source_files.remove(file_rem)
  
source_files += source_files_add

local_env.Append(CPPPATH = [sysconfig.get_python_inc()])

if system.os == 'windows' and local_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"
    MSVC_FLAGS += " /FS"
    MSVC_FLAGS += " /Fd"+local_env['BUILD_BASE_DIR']+"\\mtoa_api_tmp.pdb"
    local_env.Append(CCFLAGS = Split(MSVC_FLAGS))

MAYA_ROOT = local_env.subst(local_env['MAYA_ROOT'])
MAYA_INCLUDE_PATH = local_env.subst(local_env['MAYA_INCLUDE_PATH'])
if MAYA_INCLUDE_PATH == '.':
    if system.os == 'darwin':
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, '../../devkit/include')
    else:
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, 'include')
# check in Maya directory if the tar.gz has been extracted

maya_version = get_maya_version(os.path.join(MAYA_INCLUDE_PATH, 'maya', 'MTypes.h'))
maya_version_base = maya_version[0:4]

MTOA_EXTERNAL_PATH = local_env.subst(local_env['EXTERNAL_PATH'])

if not local_env['MTOA_DISABLE_RV']:
    renderViewIncludeFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'include')
    if int(maya_version_base) >= 2024 and system.os == 'linux':
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', '2024')
    elif int(maya_version_base) >= 2021:
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', '2022')
    else:
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib')

    local_env.Append(LIBPATH = [renderViewLibFolder])
    local_env.Append(CPPPATH = [renderViewIncludeFolder])

    if system.os == 'windows':
        local_env.Append(LIBS = ['ai_renderview.lib'])
    else:
        local_env.Append(LIBS = ['ai_renderview'])

 

MTOA_API = local_env.SharedLibrary('mtoa_api', source_files)


if system.os == 'darwin':
    local_env.Append(CPPDEFINES = Split('DARWIN'))
    local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
    local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')

Return('MTOA_API')
