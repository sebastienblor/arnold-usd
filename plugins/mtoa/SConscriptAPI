# vim: filetype=python

## load our own python modules
import system
import os
from build_tools import find_files_recursive
from distutils import sysconfig

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
include_files = []
for subdir in ['attributes', 'common', 'extension', 'platform', 'render', 'scene', 'utils'] :
   dir = os.path.join(src_base_dir, subdir)
   source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]
   include_files += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.h'])]

# Remove ExtensionsManager from extensions
# source_files_rem = [os.path.join('extension', 'ExtensionsManager.cpp')]
# include_files_rem = [os.path.join('extension', 'ExtensionsManager.h')]

# for file_rem in source_files_rem:
#   source_files.remove(file_rem)
# for file_rem in include_files_rem:
#   include_files.remove(file_rem)

#Add files to be exported by the API from 'nodes' and 'translators' folder
source_files_add = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('translators', 'camera', 'ArnoldCameraTranslator.cpp'),
                    os.path.join('translators', 'light', 'ArnoldLightTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ArnoldShaderTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ArnoldShapeTranslator.cpp'),
                    os.path.join('translators', 'shape', 'GeometryTranslators.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp')]
include_files_add = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.h'),
                     os.path.join('translators', 'camera', 'ArnoldCameraTranslator.h'),
                     os.path.join('translators', 'light', 'ArnoldLightTranslator.h'),
                     os.path.join('translators', 'shader', 'ArnoldShaderTranslator.h'),
                     os.path.join('translators', 'shape', 'ArnoldShapeTranslator.h'),
                     os.path.join('translators', 'shape', 'GeometryTranslators.h'),
                     os.path.join('translators', 'NodeTranslator.h')]
  
source_files += source_files_add
include_files += include_files_add


local_env.Append(CPPPATH = [sysconfig.get_python_inc()])

MTOA_API = local_env.SharedLibrary('mtoa_api', source_files)

if system.os() == 'windows':
   local_env['MSVSSCONSCRIPT'] = local_env.File('SConscriptAPI')
   MTOA_API_PRJ = local_env.MSVSProject(target = 'mtoa_api' + local_env['MSVS']['PROJECTSUFFIX'],
                                    srcs = source_files + include_files,
                                    incs = [],
                                    buildtarget = 'api',
                                    cmdargs = ['-Q -s COMPILER=msvc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=msvc MODE=opt TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=opt TARGET_ARCH=x86'],
                                    variant = ['Debug_MSVC|Win32',
                                               'Debug_ICC|Win32',
                                               'Opt_MSVC|Win32',
                                               'Opt_ICC|Win32'],
                                    auto_build_solution = 0,
                                    nokeep = 1)

   local_env.AlwaysBuild(MTOA_API_PRJ)
   
   Return('MTOA_API MTOA_API_PRJ')
      
else:
   if system.os() == 'darwin':
      local_env.Append(CPPDEFINES = Split('DARWIN'))
      local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
      local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')
      local_env.Append(CPPPATH = '/System/Library/Frameworks/GLUT.framework/Headers')


   Return('MTOA_API')
