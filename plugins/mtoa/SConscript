# vim: filetype=python

## load our own python modules
import system
from build_tools import find_files_recursive, find_files

import os

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')

source_files  = [os.path.join('nodes', x) for x in find_files_recursive(os.path.join(src_base_dir, 'nodes'), ['.c', '.cpp'])]
include_files = [os.path.join('nodes', x) for x in find_files_recursive(os.path.join(src_base_dir, 'nodes'), ['.h'])]
source_files  += [os.path.join('translators', x) for x in find_files_recursive(os.path.join(src_base_dir, 'translators'), ['.c', '.cpp'])]
include_files += [os.path.join('translators', x) for x in find_files_recursive(os.path.join(src_base_dir, 'translators'), ['.h'])]

# Add ExtensionsManager from extension
# source_files += [os.path.join('extension', 'ExtensionsManager.cpp')]
# include_files += [os.path.join('extension', 'ExtensionsManager.h')]

#Remove files to be exported by the API from 'nodes' and 'translators' folder
source_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'shape', 'GeometryTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp')]
include_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.h'),
                     os.path.join('translators', 'camera', 'CameraTranslator.h'),
                     os.path.join('translators', 'light', 'LightTranslator.h'),
                     os.path.join('translators', 'options', 'OptionsTranslator.h'),
                     os.path.join('translators', 'shader', 'ShaderTranslator.h'),
                     os.path.join('translators', 'shape', 'ShapeTranslator.h'),
                     os.path.join('translators', 'shape', 'GeometryTranslator.h'),
                     os.path.join('translators', 'NodeTranslator.h')]
                     
for file_rem in source_files_rem:
   source_files.remove(file_rem)
for file_rem in include_files_rem:
   include_files.remove(file_rem)

source_files  += find_files(src_base_dir, ['.c', '.cpp'])
include_files += find_files(src_base_dir, ['.h'])
source_files  += [os.path.join('commands', x) for x in find_files_recursive(os.path.join(src_base_dir, 'commands'), ['.c', '.cpp'])]
include_files += [os.path.join('commands', x) for x in find_files_recursive(os.path.join(src_base_dir, 'commands'), ['.h'])]

if system.os() == 'darwin':
    local_env.Append(LDMODULESUFFIX='.bundle')

# LoadableModule doesn't work on windows for now.
if system.os() == 'windows':
   MTOA = local_env.SharedLibrary('mtoa', source_files, LIBPREFIX='')
else:
   MTOA = local_env.LoadableModule('mtoa', source_files, LIBPREFIX='')

local_env.Append(LIBPATH = [os.path.join(Dir('.').abspath, '..', 'api')])
local_env.Append(LIBS = ['mtoa_api'])

if system.os() == 'windows':
   local_env['MSVSSCONSCRIPT'] = local_env.File('SConscript')
   MTOA_PRJ = local_env.MSVSProject(target = 'mtoa' + local_env['MSVS']['PROJECTSUFFIX'],
                                    srcs = source_files + include_files,
                                    incs = [],
                                    buildtarget = 'mtoa',
                                    cmdargs = ['-Q -s COMPILER=msvc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=msvc MODE=opt TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=opt TARGET_ARCH=x86'],
                                    variant = ['Debug_MSVC|Win32',
                                               'Debug_ICC|Win32',
                                               'Opt_MSVC|Win32',
                                               'Opt_ICC|Win32'],
                                    auto_build_solution = 0,
                                    nokeep = 1)

   local_env.AlwaysBuild(MTOA_PRJ)
   
   Return('MTOA MTOA_PRJ')
      
else:
   if system.os() == 'darwin':
      local_env.Append(CPPDEFINES = Split('DARWIN'))
      local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
      local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')
      local_env.Append(CPPPATH = '/System/Library/Frameworks/GLUT.framework/Headers')

   Return('MTOA')
