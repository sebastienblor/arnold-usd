# vim: filetype=python

## load our own python modules
import utils.system as system
from utils.build_tools import find_files_recursive
from utils.mtoa_build_tools import get_maya_version, find_files
from shutil import copyfile
import os

# import build env
Import('maya_env')
local_env = maya_env.Clone()

GLEW_INCLUDES = local_env.subst(local_env['GLEW_INCLUDES'])
GLEW_LIB = local_env.subst(local_env['GLEW_LIB'])


# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
subdirs = ['commands', 'nodes', 'translators','viewport2']
for subdir in subdirs:
    dir = os.path.join(src_base_dir, subdir)
    source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]

if system.os == 'windows' and local_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"
    MSVC_FLAGS += " /FS"
    MSVC_FLAGS += " /Fd"+local_env['BUILD_BASE_DIR']+"\\mtoa_tmp.pdb"
    local_env.Append(CCFLAGS = Split(MSVC_FLAGS))

#Remove files to be exported by the API from 'nodes' and 'translators' folder
source_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldProceduralNode.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldBaseProcedural.cpp'),
                    os.path.join('nodes', 'shape', 'ArnoldDrawGeometry.cpp'),
                    os.path.join('nodes', 'shape', 'PolyTriangulator.cpp'),
                    os.path.join('nodes', 'ArnoldOperatorNode.cpp'),
                    os.path.join('nodes', 'ArnoldImagerNode.cpp'),
                    os.path.join('viewport2', 'ArnoldProceduralSubSceneOverride.cpp'),
                    os.path.join('translators', 'camera', 'AutoCameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'ImagePlaneTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'driver', 'DriverTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShadingEngineTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ProceduralTranslator.cpp'),
                    os.path.join('translators', 'shape', 'AutoProceduralTranslator.cpp'),
                    os.path.join('translators', 'operator', 'OperatorTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerLightMixerTranslator.cpp'),
                    os.path.join('translators', 'imager', 'ImagerColorCurvesTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslatorImpl.cpp'),
                    os.path.join('translators', 'DagTranslator.cpp'),
                    os.path.join('translators', 'ObjectSetTranslator.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardSurfaceNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldStandardHairNode.cpp'),
                    os.path.join('nodes', 'shader', 'ArnoldSkinShaderNode.cpp'),
                    os.path.join('translators', 'filter', 'FilterTranslator.cpp'),
                    os.path.join('translators', 'AutoDagTranslator.cpp')]
                    

source_files_add = [os.path.join('utils', 'DrawUtils.cpp'), os.path.join('utils', 'ConstantStringsAPI.cpp')]

for file_rem in source_files_rem:
    source_files.remove(file_rem)

source_files += source_files_add

# add src_base_dir files (Main.cpp...)
source_files  += find_files(src_base_dir, ['.c', '.cpp'])

MAYA_ROOT = local_env.subst(local_env['MAYA_ROOT'])
MAYA_INCLUDE_PATH = local_env.subst(local_env['MAYA_INCLUDE_PATH'])
if MAYA_INCLUDE_PATH == '.':
    if system.os == 'darwin':
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, '../../devkit/include')
    else:
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, 'include')
# check in Maya directory if the tar.gz has been extracted

maya_version = get_maya_version(os.path.join(MAYA_INCLUDE_PATH, 'maya', 'MTypes.h'))
maya_version_base = maya_version[0:4]

MTOA_EXTERNAL_PATH = local_env.subst(local_env['EXTERNAL_PATH'])

if system.os == 'windows':
    local_env.Append(LIBS = ['user32.lib', 'advapi32.lib']) # this is needed for the licensing tools, for system environment variables

if not local_env['MTOA_DISABLE_RV']:
    print 'Linking with Arnold RenderView'
    renderViewIncludeFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'include')
    if int(maya_version_base) >= 2024:
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', '2024')
    elif int(maya_version_base) >= 2021:
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', '2022')
    else:
        renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib')

    local_env.Append(LIBPATH = [renderViewLibFolder])
    local_env.Append(CPPPATH = [renderViewIncludeFolder])

    if system.os == 'windows':
        local_env.Append(LIBS = ['ai_renderview.lib'])
    else:
        local_env.Append(LIBS = ['ai_renderview'])

if local_env['ENABLE_AXFTOA']:
    ARNOLD_AXF_INCLUDES = os.path.join(MTOA_EXTERNAL_PATH, 'axf/include')
    ARNOLD_AXF_LIB = os.path.join(MTOA_EXTERNAL_PATH, 'axf/lib/', system.os )
    local_env.Append(CPPPATH = [ARNOLD_AXF_INCLUDES,])
    local_env.Append(LIBPATH = [ARNOLD_AXF_LIB,])
    local_env.Append(LIBS=Split('AxFtoA'))

if system.os == 'darwin':
    local_env.Append(LDMODULESUFFIX='.bundle')

if system.os == 'windows':
    local_env.Append(CPPPATH = [GLEW_INCLUDES])

# LoadableModule doesn't work on windows for now.
if system.os == 'windows':
    local_env.Append(LIBS=['d3d11.lib', 'd3dcompiler.lib'])
    
    local_env.Append(LIBS=Split('ws2_32.lib'))
    MTOA = local_env.SharedLibrary('mtoa', source_files, LIBPREFIX='')
else:
    MTOA = local_env.LoadableModule('mtoa', source_files, LIBPREFIX='')

local_env.Append(LIBPATH = [os.path.join(Dir('.').abspath, '..', 'api')])
local_env.Append(LIBS = ['mtoa_api'])

OPENSSL_PATH = os.path.join(local_env["EXTERNAL_PATH"], 'openssl')
OPENSSL_INCLUDES = os.path.join(OPENSSL_PATH, 'include')
OPENSSL_LIB_PATH = os.path.join(OPENSSL_PATH, 'lib', system.os)
CURL_INCLUDES = os.path.join(local_env["EXTERNAL_PATH"], 'curl', 'include')
CURL_LIB_PATH = os.path.join(local_env["EXTERNAL_PATH"], 'curl', 'lib', system.os)
ZLIB_INCLUDES = os.path.join(local_env["EXTERNAL_PATH"], 'zlib', 'include')
ZLIB_LIB_PATH = os.path.join(local_env["EXTERNAL_PATH"], 'zlib', 'lib', system.os)

if system.os == 'linux':
    OPENSSL_LIB = os.path.join(OPENSSL_LIB_PATH, "libssl.a")
    CRYPTO_LIB = os.path.join(OPENSSL_LIB_PATH, "libcrypto.a")
    CURL_LIB = os.path.join(CURL_LIB_PATH, "libcurl.a")
    #ZLIB_LIB = os.path.join(ZLIB_LIB_PATH, "libz.a")
    local_env.Append(CPPPATH = [GLEW_INCLUDES, CURL_INCLUDES, OPENSSL_INCLUDES])
    local_env.Append(LIBS = [File(GLEW_LIB), File(CURL_LIB), File(OPENSSL_LIB), File(CRYPTO_LIB)])
    local_env.Append(RPATH = local_env.Literal(os.path.join('\\$$ORIGIN', '..', 'bin')))
elif system.os == 'windows':
    local_env.Append(CPPDEFINES = ['CURL_STATICLIB'])


    CURL_LIB = os.path.join(CURL_LIB_PATH, "libcurl.lib")
    local_env.Append(CPPPATH = [GLEW_INCLUDES, CURL_INCLUDES, OPENSSL_INCLUDES, ZLIB_INCLUDES])
    local_env.Append(LIBPATH = [os.path.dirname(GLEW_LIB), CURL_LIB_PATH, OPENSSL_LIB_PATH, ZLIB_LIB_PATH])    
    local_env.Append(LIBS = [os.path.basename(GLEW_LIB), "libcurl.lib", "libssl.lib", "libcrypto.lib", "crypt32.lib", "wldap32.lib", "winhttp.lib", "zlibstatic.lib"])
    local_env.Append(CPPDEFINES = ['GLEW_STATIC'])
elif system.os == 'darwin':
    OPENSSL_LIB = os.path.join(OPENSSL_LIB_PATH, "libssl.a")
    CRYPTO_LIB = os.path.join(OPENSSL_LIB_PATH, "libcrypto.a")
    CURL_LIB = os.path.join(CURL_LIB_PATH, "libcurl.a")
    ZLIB_LIB = os.path.join(ZLIB_LIB_PATH, "libz.a")
    local_env.Append(CPPPATH = [GLEW_INCLUDES, CURL_INCLUDES, OPENSSL_INCLUDES])
    local_env.Append(LIBS = [File(GLEW_LIB), File(CURL_LIB), File(OPENSSL_LIB), File(CRYPTO_LIB), File(ZLIB_LIB), "ldap"])
    local_env.Append(CPPDEFINES = ['GLEW_STATIC', 'CURL_STATICLIB'])
    local_env.Append(CPPDEFINES = Split('DARWIN'))
    local_env.Append(FRAMEWORKS=Split('OpenGl AGL SystemConfiguration Security CoreFoundation Foundation CoreServices AppKit'))
    local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')

if local_env['ENABLE_ALEMBIC']:
    alembic_version = '1.8.3'
    alembic_extern_path = os.path.join(local_env["EXTERNAL_PATH"], 'alembic-'+alembic_version)
    openexr_extern_path = os.path.join(local_env["EXTERNAL_PATH"], 'openexr')
    abc_lib_dir = os.path.join(alembic_extern_path, 'lib', system.os)
    openexr_lib_dir = os.path.join(openexr_extern_path, 'lib', system.os)
    local_env.Append(CPPPATH = [os.path.join(alembic_extern_path, 'include')])
    local_env.Append(CPPPATH = [os.path.join(openexr_extern_path, 'include', 'OpenEXR')])
    if system.os in ['linux', 'darwin']:
        local_env.Append(LIBS = [File(os.path.join(abc_lib_dir, 'libAlembic.a')), 
                                 File(os.path.join(openexr_lib_dir, 'libImath-2_4.a')), 
                                 File(os.path.join(openexr_lib_dir, 'libHalf-2_4.a')),
                                 File(os.path.join(openexr_lib_dir, 'libIex-2_4.a'))])
        local_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default
    elif system.os == 'windows':
        local_env.Append(LIBS = ['Alembic.lib', 
                                 'Half-2_4.lib',
                                 'Iex-2_4.lib',
                                 'Imath-2_4.lib'])

        local_env.Append(LIBPATH = [abc_lib_dir, openexr_lib_dir])
        local_env.Append(CPPDEFINES = ['ALEMBIC_STATIC'])

Return('MTOA')
