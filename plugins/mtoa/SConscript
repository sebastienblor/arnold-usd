# vim: filetype=python

## load our own python modules
import system
from build_tools import find_files_recursive, find_files, get_maya_version
from shutil import copyfile
import os

# import build env
Import('maya_env')
local_env = maya_env.Clone()

GLEW_INCLUDES = local_env.subst(local_env['GLEW_INCLUDES'])
GLEW_LIB = local_env.subst(local_env['GLEW_LIB'])

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
subdirs = ['commands', 'nodes', 'translators']
if local_env['ENABLE_VP2']:
    subdirs.append('viewport2')
for subdir in subdirs:
    dir = os.path.join(src_base_dir, subdir)
    source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]

#Remove files to be exported by the API from 'nodes' and 'translators' folder
source_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('translators', 'camera', 'AutoCameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp'),
                    os.path.join('translators', 'DagTranslator.cpp')]

source_files_add = [os.path.join('render', 'BatchProgressDriver.cpp'), os.path.join('utils', 'DrawUtils.cpp')]

for file_rem in source_files_rem:
    source_files.remove(file_rem)

source_files += source_files_add

# add src_base_dir files (Main.cpp...)
source_files  += find_files(src_base_dir, ['.c', '.cpp'])

MAYA_ROOT = local_env.subst(local_env['MAYA_ROOT'])
MAYA_INCLUDE_PATH = local_env.subst(local_env['MAYA_INCLUDE_PATH'])
if MAYA_INCLUDE_PATH == '.':
    if system.os() == 'darwin':
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, '../../devkit/include')
    else:
        MAYA_INCLUDE_PATH = os.path.join(MAYA_ROOT, 'include')
# check in Maya directory if the tar.gz has been extracted

maya_version = get_maya_version(os.path.join(MAYA_INCLUDE_PATH, 'maya', 'MTypes.h'))
maya_version_base = maya_version[0:4]
#need to temporarily set 201650 as 2017
if int(maya_version) >= 201650:
    maya_version_base="2017"

mayaQtFolder = ""
mayaQtTarGz = ""

MTOA_EXTERNAL_PATH = local_env.subst(local_env['EXTERNAL_PATH'])

if (int(maya_version_base) == 2014):
    if system.os() == 'darwin':
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.2-include')
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.2-include.tar.gz')
    else:
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.2-64-include')
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.2-64-include.tar.gz')
if (int(maya_version_base) == 2015):
    mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.5-include')
    mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.5-include.tar.gz')
elif (int(maya_version_base) >= 2016):
    if (int(maya_version) < 201650):
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-4.8.6-include') 
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-4.8.6-include.tar.gz')
    elif (int(maya_version) >= 201650):
        mayaQtFolder = os.path.join(MTOA_EXTERNAL_PATH, 'qt-5.5.0-include') 
        mayaQtTarGz = os.path.join(MAYA_INCLUDE_PATH, 'qt-5.5.0-include.tar.gz')

if not os.path.isdir(mayaQtFolder):
    if os.path.exists(mayaQtTarGz):
        print "Extracting Qt Files..."
        import tarfile
        tfile = tarfile.open(mayaQtTarGz, 'r:gz')
        tfile.extractall(mayaQtFolder)
    else:
        print "Error : Qt Files not Found"

local_env['QT_ROOT_DIR'] = mayaQtFolder

local_env.Append(CPPPATH = [mayaQtFolder])
if system.os() == 'darwin':
    maya_qt_lib_dir = os.path.join(MAYA_ROOT, 'MacOS')
    qt_lib_dir = os.path.join(MTOA_EXTERNAL_PATH, 'QtLibs', maya_version_base)
    if not os.path.isdir(qt_lib_dir):
        os.makedirs(qt_lib_dir)

    copyfile(os.path.join(maya_qt_lib_dir, 'QtCore'), os.path.join(qt_lib_dir, 'libQtCore.dylib'))
    copyfile(os.path.join(maya_qt_lib_dir, 'QtGui'), os.path.join(qt_lib_dir, 'libQtGui.dylib'))
    copyfile(os.path.join(maya_qt_lib_dir, 'QtOpenGL'), os.path.join(qt_lib_dir, 'libQtOpenGL.dylib'))


else:
    qt_lib_dir = os.path.join(MAYA_ROOT, 'lib')
local_env.Append(LIBPATH = [qt_lib_dir])

if system.os() == 'windows':
    if (int(maya_version) < 201650):
        local_env.Append(LIBS = ['QtCore4.lib', 'QtGui4.lib', 'QtOpenGL4.lib'])
    else:
        local_env.Append(LIBS = ['Qt5Core.lib', 'Qt5Gui.lib', 'Qt5OpenGL.lib'])
elif system.os() == 'linux':
    local_env.Append(LIBS = ['QtCore', 'QtGui', 'QtOpenGL'])
else:
    local_env

if not local_env['MTOA_DISABLE_RV']:
    print 'Linking with Arnold RenderView'
    renderViewIncludeFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'include')
    renderViewLibFolder = os.path.join(MTOA_EXTERNAL_PATH, 'renderview', 'lib', maya_version_base)

    local_env.Append(LIBPATH = [renderViewLibFolder])
    local_env.Append(CPPPATH = [renderViewIncludeFolder])

    if system.os() == 'windows':
        local_env.Append(LIBS = ['ai_renderview.lib'])
    else:
        local_env.Append(LIBS = ['ai_renderview'])



if system.os() == 'darwin':
    local_env.Append(LDMODULESUFFIX='.bundle')

if local_env['ENABLE_VP2']:
    if system.os() == 'windows':
        local_env.Append(CPPPATH = [GLEW_INCLUDES])
        if local_env['REQUIRE_DXSDK']:
            local_env.Append(CPPPATH = [os.path.join(local_env["EXTERNAL_PATH"], 'directx11', 'include')])
            local_env.Append(LIBPATH = [os.path.join(local_env["EXTERNAL_PATH"], 'directx11', 'lib')])

# LoadableModule doesn't work on windows for now.
if system.os() == 'windows':
    if local_env['ENABLE_VP2']:
        local_env.Append(LIBS=['d3d11.lib', 'd3dcompiler.lib'])
        if local_env['REQUIRE_DXSDK']:
            local_env.Append(LIBS=['d3dx11.lib'])

    local_env.Append(LIBS=Split('ws2_32.lib'))
    MTOA = local_env.SharedLibrary('mtoa', source_files, LIBPREFIX='')
else:
    MTOA = local_env.LoadableModule('mtoa', source_files, LIBPREFIX='')

local_env.Append(LIBPATH = [os.path.join(Dir('.').abspath, '..', 'api')])
local_env.Append(LIBS = ['mtoa_api'])

if local_env['ENABLE_VP2']:
    if system.os() == 'linux':
        local_env.Append(CPPPATH = [GLEW_INCLUDES])
        local_env.Append(LIBS = [File(GLEW_LIB)])
    elif system.os() == 'windows':
        local_env.Append(CPPPATH = [GLEW_INCLUDES])
        local_env.Append(LIBPATH = [os.path.dirname(GLEW_LIB)])
        local_env.Append(LIBS = [os.path.basename(GLEW_LIB)])
        local_env.Append(CPPDEFINES = ['GLEW_STATIC'])
    elif system.os() == 'darwin':
        local_env.Append(CPPPATH = [GLEW_INCLUDES])
        local_env.Append(LIBS = [File(GLEW_LIB)])
        local_env.Append(CPPDEFINES = ['GLEW_STATIC'])
        
if system.os() == 'darwin':
    local_env.Append(CPPDEFINES = Split('DARWIN'))
    local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
    local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')
elif system.os() == 'linux':
    local_env.Append(RPATH = local_env.Literal(os.path.join('\\$$ORIGIN', '..', 'bin')))

Return('MTOA')
