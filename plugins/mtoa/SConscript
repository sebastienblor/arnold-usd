# vim: filetype=python

## load our own python modules
import system
from build_tools import find_files_recursive, find_files

import os

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files = []
include_files = []
subdirs = ['commands', 'nodes', 'translators']
if local_env['ENABLE_VP2']:
    subdirs.append('viewport2')
for subdir in subdirs:
    dir = os.path.join(src_base_dir, subdir)
    source_files  += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.c', '.cpp'])]
    include_files += [os.path.join(subdir, x) for x in find_files_recursive(dir, ['.h'])]

#Remove files to be exported by the API from 'nodes' and 'translators' folder
source_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.cpp'),
                    os.path.join('translators', 'camera', 'AutoCameraTranslator.cpp'),
                    os.path.join('translators', 'camera', 'CameraTranslator.cpp'),
                    os.path.join('translators', 'light', 'LightTranslator.cpp'),
                    os.path.join('translators', 'options', 'OptionsTranslator.cpp'),
                    os.path.join('translators', 'shader', 'ShaderTranslator.cpp'),
                    os.path.join('translators', 'shape', 'ShapeTranslator.cpp'),
                    os.path.join('translators', 'NodeTranslator.cpp')]
include_files_rem = [os.path.join('nodes', 'shader', 'ArnoldShaderNode.h'),
                        os.path.join('translators', 'camera', 'AutoCameraTranslator.h'),
                        os.path.join('translators', 'camera', 'CameraTranslator.h'),
                        os.path.join('translators', 'light', 'LightTranslator.h'),
                        os.path.join('translators', 'options', 'OptionsTranslator.h'),
                        os.path.join('translators', 'shader', 'ShaderTranslator.h'),
                        os.path.join('translators', 'shape', 'ShapeTranslator.h'),
                        os.path.join('translators', 'NodeTranslator.h')]

source_files_add = [os.path.join('render', 'BatchProgressDriver.cpp'), os.path.join('utils', 'MayaUtils.cpp')]

include_files_add = []
                     
for file_rem in source_files_rem:
    source_files.remove(file_rem)
for file_rem in include_files_rem:
    include_files.remove(file_rem)

source_files += source_files_add
include_files += include_files_add

# add src_base_dir files (Main.cpp...)
source_files  += find_files(src_base_dir, ['.c', '.cpp'])
include_files += find_files(src_base_dir, ['.h'])

if system.os() == 'darwin':
    local_env.Append(LDMODULESUFFIX='.bundle')

# LoadableModule doesn't work on windows for now.
if system.os() == 'windows':
    local_env.Append(LIBS=Split('ws2_32.lib'))
    MTOA = local_env.SharedLibrary('mtoa', source_files, LIBPREFIX='')
else:
    MTOA = local_env.LoadableModule('mtoa', source_files, LIBPREFIX='')

local_env.Append(LIBPATH = [os.path.join(Dir('.').abspath, '..', 'api')])
local_env.Append(LIBS = ['mtoa_api'])

if system.os() == 'darwin':
    local_env.Append(CPPDEFINES = Split('DARWIN'))
    local_env.Append(FRAMEWORKS=Split('OpenGl AGL'))
    local_env.Append(CPPPATH = '/System/Library/Frameworks/OpenGL.framework/Headers')
    local_env.Append(CPPPATH = '/System/Library/Frameworks/GLUT.framework/Headers')

Return('MTOA')
