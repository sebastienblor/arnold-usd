# vim: filetype=python

## load our own python modules
import system
from build_tools import find_files_recursive

import os

# import build env
Import('maya_env')
local_env = maya_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')
source_files  = find_files_recursive(src_base_dir, ['.c', '.cpp'])
include_files = find_files_recursive(src_base_dir, ['.h'])

if system.os() == 'windows':
   pass
else:
   local_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

MTOA = local_env.SharedLibrary('mtoa', source_files, LIBPREFIX='')

if system.os() == 'windows':
   MTOA_PRJ = local_env.MSVSProject(target = 'mtoa' + local_env['MSVS']['PROJECTSUFFIX'],
                                    srcs = source_files + include_files,
                                    incs = [],
                                    buildtarget = 'mtoa',
                                    cmdargs = ['-Q -s COMPILER=msvc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=debug TARGET_ARCH=x86',
                                               '-Q -s COMPILER=msvc MODE=opt TARGET_ARCH=x86',
                                               '-Q -s COMPILER=icc MODE=opt TARGET_ARCH=x86'],
                                    variant = ['Debug_MSVC|Win32',
                                               'Debug_ICC|Win32',
                                               'Opt_MSVC|Win32',
                                               'Opt_ICC|Win32'],
                                    auto_build_solution = 0,
                                    nokeep = 1)

   local_env.AlwaysBuild(MTOA_PRJ)
   
   Return('MTOA MTOA_PRJ')
else:
   Return('MTOA')
