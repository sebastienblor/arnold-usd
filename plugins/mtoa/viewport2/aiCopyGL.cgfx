//**************************************************************************/
// Copyright 2013 Autodesk, Inc.  
// All rights reserved.
// Use of this software is subject to the terms of the Autodesk license 
// agreement provided at the time of installation or download, or which 
// otherwise accompanies this software in either electronic or hard copy form.   
//**************************************************************************/

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection < string UIWidget = "None"; >;

// The single filter input, i.e. the image to be filtered.
texture gInputTex : InputTexture
<
    string UIName = "Input Texture";
>;

// Filter input sampler.
sampler2D gInputSampler = sampler_state
{
    Texture = <gInputTex>;
    MinFilter = Point;
    MagFilter = Point;
    MipFilter = Point;
};

// Disable alpha output.
bool gDisableAlpha;

// Flip in V
bool gVerticalFlip = false;

float4 gScissorRect = { 0.0f, 0.0f, 1.0f, 1.0f };

bool gUseScissorRect = true;

// Vertex shader input structure.
struct VS_INPUT
{
    float4 Pos : POSITION;
    float3 UV : TEXCOORD0;
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;
    float3 UV : TEXCOORD0;
};

// Vertex shader.
VS_TO_PS VS_Copy(VS_INPUT In)
{
    VS_TO_PS Out;
    
    // Transform the position from object space to clip space for output.
    Out.HPos = mul(gWVPXf, In.Pos);
    
    // Pass the texture coordinates.
    Out.UV = gVerticalFlip ? float3( In.UV[0], 1.0f - In.UV[1], In.UV[2] ) : In.UV;
    
    return Out;
}

// Pixel shader.
float4 PS_Copy(VS_TO_PS In) : COLOR0
{
    if (gUseScissorRect)
    {
        if (In.UV.x < gScissorRect.x || In.UV.x > gScissorRect.z)
            discard;
        if (In.UV.y < gScissorRect.y || In.UV.y > gScissorRect.w)
            discard;
    }

	float4 output = tex2D(gInputSampler, In.UV.xy); 
	if(gDisableAlpha)
	{
	    return float4( output.xyz, 1.0 );
	}
	else
	{
	    return output;
	}
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexProgram = compile glslv VS_Copy();
        FragmentProgram  = compile glslf PS_Copy();
    }
}
