
global proc UpdateRenderSettings()
{
   int $flag = `getAttr defaultArnoldRenderOptions.threads_autodetect` == false;
   attrControlGrp -edit -enable $flag os_threads;
}

global proc UpdateSamplingSettings()
{
   int $flag = `getAttr defaultArnoldRenderOptions.use_sample_clamp` == true;
   attrControlGrp -edit -enable $flag ss_max_value;
}

global proc UpdateMotionBlurSettings()
{
   int $flag = `getAttr defaultArnoldRenderOptions.motion_blur_enable` == true;
   attrControlGrp -edit -enable $flag mb_camera_enable;
   attrControlGrp -edit -enable $flag mb_objects_enable;
   attrControlGrp -edit -enable $flag mb_object_deform_enable;
   attrControlGrp -edit -enable $flag mb_lights_enable;
   attrControlGrp -edit -enable $flag mb_shutter_size;
   attrControlGrp -edit -enable $flag mb_shutter_offset;
   attrControlGrp -edit -enable $flag mb_shutter_type;
   attrControlGrp -edit -enable $flag mb_motion_steps;
   attrControlGrp -edit -enable $flag mb_motion_frames;
}

global proc UpdateLogSettings()
{
   string $name = `getAttr defaultArnoldRenderOptions.log_filename`;
   
   attrControlGrp -edit -enable ($name != "") log_file_verbosity;
}

global proc SelectBackground()
{
   int $bkg = `getAttr defaultArnoldRenderOptions.background`;

   switch ($bkg)
   {
      case 0:
      break;
      
      case 1: // Sky
      {
         createNode -shared -n "defaultSkyShader" ArnoldSkyShader;
      }
      break;
   }
}

global proc SelectAtmosphere()
{
   int $bkg = `getAttr defaultArnoldRenderOptions.atmosphere`;

   switch ($bkg)
   {
      case 0:
      break;
      
      case 1: // Fog
      {
         createNode -shared -n "defaultFogShader" ArnoldFogShader;
      }
      break;
      
      case 2: // Volume Scattering
      {
         createNode -shared -n "defaultVolumeScatteringShader" ArnoldVolumeScatteringShader;
      }
      break;
   }
}

global proc CreateArnoldRenderSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true arnoldRenderLayout;

      attrControlGrp -label "Progressive Rendering"
         -attribute defaultArnoldRenderOptions.progressive_rendering
         -cc UpdateRenderSettings
         os_progressive_rendering;
 
      attrControlGrp -label "Autodetect Threads"
         -attribute defaultArnoldRenderOptions.threads_autodetect
         -cc UpdateRenderSettings
         os_threads_autodetect;
 
      attrControlGrp -label "Threads"
         -attribute defaultArnoldRenderOptions.threads
         os_threads;
 
      attrControlGrp -label "Bucket Scanning"
         -attribute defaultArnoldRenderOptions.bucket_scanning
         os_bucket_scanning;
            
      attrControlGrp -label "Bucket Size"
         -attribute defaultArnoldRenderOptions.bucket_size
         os_bucket_size;
            
      attrControlGrp -label "Clear Before Render"
         -attribute defaultArnoldRenderOptions.clear_before_render
         os_clear_before_render;
         
      attrControlGrp -label "Abort On Error"
         -attribute defaultArnoldRenderOptions.abort_on_error
         os_abort_on_error;
                        
      attrControlGrp -label "Abort On License Fail"
         -attribute defaultArnoldRenderOptions.abort_on_license_fail
         os_abort_on_license_fail;
                        
      separator;

      attrControlGrp -label "Plug-ins Path"
         -attribute defaultArnoldRenderOptions.plugins_path
         os_plugins_path;
                        
      setParent ..;

   setUITemplate -popTemplate;
}

global proc UpdateArnoldFilterOptions()
{
   string $selected_filter_type = `getAttr -as defaultArnoldRenderOptions.filter_type`;
   switch($selected_filter_type)
   {

      case "box_filter":
      case "catrom2d_filter":
      case "catrom_filter":
      case "closest_filter":
      case "cubic_filter":
      case "mitnet_filter":
      case "video_filter":
         columnLayout -e -vis 0 cl_filter_width;
         columnLayout -e -vis 0 cl_filter_domain;
         columnLayout -e -vis 0 cl_filter_scalar_mode;
         columnLayout -e -vis 0 cl_filter_minmax;
         break;
      case "cone_filter":
      case "cook_filter":
      case "disk_filter":
      case "gaussian_filter":
      case "sinc_filter":
      case "triangle_filter":
         columnLayout -e -vis 1 cl_filter_width;
         columnLayout -e -vis 0 cl_filter_domain;
         columnLayout -e -vis 0 cl_filter_scalar_mode;
         columnLayout -e -vis 0 cl_filter_minmax;
         break;
      case "farthest_filter":
         columnLayout -e -vis 0 cl_filter_width;
         columnLayout -e -vis 1 cl_filter_domain;
         columnLayout -e -vis 0 cl_filter_scalar_mode;
         columnLayout -e -vis 0 cl_filter_minmax;
         break;
      case "heatmap_filter":
         columnLayout -e -vis 0 cl_filter_width;
         columnLayout -e -vis 0 cl_filter_domain;
         columnLayout -e -vis 0 cl_filter_scalar_mode;
         columnLayout -e -vis 1 cl_filter_minmax;
         break;
      case "variance_filter":
         columnLayout -e -vis 1 cl_filter_width;
         columnLayout -e -vis 0 cl_filter_domain;
         columnLayout -e -vis 1 cl_filter_scalar_mode;
         columnLayout -e -vis 0 cl_filter_minmax;
         break;
   }
 
}

global proc CreateArnoldSamplingSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "AA Samples"
         -attribute defaultArnoldRenderOptions.AA_samples
         ss_AA_samples;

      attrControlGrp -label "Hemi Samples"
         -attribute defaultArnoldRenderOptions.GI_diffuse_samples
         ss_hemi_samples;

      attrControlGrp -label "Glossy Samples"
         -attribute defaultArnoldRenderOptions.GI_glossy_samples
         ss_glossy_samples;

      attrControlGrp -label "SSS Samples"
         -attribute defaultArnoldRenderOptions.GI_sss_hemi_samples
         ss_sss_hemi_samples;

      attrControlGrp -label "Clamp Sample Values"
         -attribute defaultArnoldRenderOptions.use_sample_clamp
         -cc UpdateSamplingSettings
         ss_clamp_sample_values;

      attrControlGrp -label "Max. Value"
         -attribute defaultArnoldRenderOptions.AA_sample_clamp
         ss_max_value;

      separator;

      attrControlGrp -label "Filter Type"
         -attribute defaultArnoldRenderOptions.filter_type
         -cc UpdateArnoldFilterOptions
         os_filter_type;

      columnLayout -vis 0 cl_filter_width;      
         attrControlGrp -label "Filter Width"
             -attribute defaultArnoldRenderOptions.filter_width
             os_filter_width;

         setParent ..;

      columnLayout -vis 0 cl_filter_domain;      
         attrControlGrp -label "Filter Domain"
             -attribute defaultArnoldRenderOptions.filter_domain
             os_filter_domain;

         setParent ..;

      columnLayout -vis 0 cl_filter_scalar_mode;      
         attrControlGrp -label "Filter Scalar Mode"
             -attribute defaultArnoldRenderOptions.filter_scalar_mode
             os_filter_scalar_mode;

         setParent ..;

      columnLayout -vis 0 cl_filter_minmax;      
         attrControlGrp -label "Filter Minimum"
             -attribute defaultArnoldRenderOptions.filter_minimum
             os_filter_minimum;

         attrControlGrp -label "Filter Maximum"
             -attribute defaultArnoldRenderOptions.filter_maximum
             os_filter_maximum;

         setParent ..;

      setParent ..;

   setUITemplate -popTemplate;
   UpdateArnoldFilterOptions;
}

global proc CreateArnoldGammaSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Display Driver gamma"
         -attribute defaultArnoldRenderOptions.driver_gamma
         ss_driver_gamma;

      separator;
      
      attrControlGrp -label "Lights"
         -attribute defaultArnoldRenderOptions.light_gamma
         ss_light_gamma;

      attrControlGrp -label "Shaders"
         -attribute defaultArnoldRenderOptions.shader_gamma
         ss_shader_gamma;

      attrControlGrp -label "Textures"
         -attribute defaultArnoldRenderOptions.texture_gamma
         ss_texture_gamma;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldRayDepthSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Total depth"
         -attribute defaultArnoldRenderOptions.GI_total_depth
         rs_total_depth;

      separator -style "none";
      
      attrControlGrp -label "Diffuse depth"
         -attribute defaultArnoldRenderOptions.GI_diffuse_depth
         rs_diffuse_depth;

      attrControlGrp -label "Glossy depth"
         -attribute defaultArnoldRenderOptions.GI_glossy_depth
         rs_glossy_depth;

      attrControlGrp -label "Reflection depth"
         -attribute defaultArnoldRenderOptions.GI_reflection_depth
         rs_reflection_depth;

      attrControlGrp -label "Refraction depth"
         -attribute defaultArnoldRenderOptions.GI_refraction_depth
         rs_refraction_depth;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldEnvironmentSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Background"
         -attribute defaultArnoldRenderOptions.background
         -cc SelectBackground
         es_background;

      button -label "Edit Background" -c SelectBackground;

      separator -style "none";
            
      attrControlGrp -label "Atmosphere"
         -attribute defaultArnoldRenderOptions.atmosphere
         -cc SelectAtmosphere
         es_atmosphere;

      button -label "Edit Atmosphere" -c SelectAtmosphere;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldMotionBlurSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Enable"
         -attribute defaultArnoldRenderOptions.motion_blur_enable
         -cc UpdateMotionBlurSettings
         mb_enable;

      attrControlGrp -label "Lights"
         -attribute defaultArnoldRenderOptions.mb_lights_enable
         mb_lights_enable;

      attrControlGrp -label "Camera"
         -attribute defaultArnoldRenderOptions.mb_camera_enable
         mb_camera_enable;

      attrControlGrp -label "Objects"
         -attribute defaultArnoldRenderOptions.mb_objects_enable
         mb_objects_enable;

      attrControlGrp -label "Object deformation"
         -attribute defaultArnoldRenderOptions.mb_object_deform_enable
         mb_object_deform_enable;

      separator;
      
      attrControlGrp -label "Shutter Size"
         -attribute defaultArnoldRenderOptions.shutter_size
         mb_shutter_size;

      attrControlGrp -label "Shutter Offset"
         -attribute defaultArnoldRenderOptions.shutter_offset
         mb_shutter_offset;

      attrControlGrp -label "Shutter Type"
         -attribute defaultArnoldRenderOptions.shutter_type
         mb_shutter_type;

      attrControlGrp -label "Motion Steps"
         -attribute defaultArnoldRenderOptions.motion_steps
         mb_motion_steps;

      attrControlGrp -label "Blur By (Frames)"
         -attribute defaultArnoldRenderOptions.motion_frames
         mb_motion_frames;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldSSSSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;

      attrControlGrp -label "SSS lazy evaluation"
         -attribute defaultArnoldRenderOptions.sss_lazy_evaluation
         mb_sss_lazy_evaluation;

      attrControlGrp -label "SSS subpixel cache"
         -attribute defaultArnoldRenderOptions.sss_subpixel_cache
         mb_sss_subpixel_cache;

      attrControlGrp -label "Show samples"
         -attribute defaultArnoldRenderOptions.show_samples
         mb_show_samples;

      setParent ..;

   setUITemplate -popTemplate;

}

global proc CreateArnoldSubdivSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Max. Subdivisions"
         -attribute defaultArnoldRenderOptions.max_subdivisions
         sub_max_subdivisions;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldLogSettings()
{
   setUITemplate -pushTemplate attributeEditorTemplate;
   columnLayout -adjustableColumn true;
      
      attrControlGrp -label "Filename"
         -attribute defaultArnoldRenderOptions.log_filename
         -cc UpdateLogSettings
         log_filename;

      attrControlGrp -label "Max. Warnings"
         -attribute defaultArnoldRenderOptions.log_max_warnings
         log_max_warnings;

      attrControlGrp -label "Console Verbosity Level"
         -attribute defaultArnoldRenderOptions.log_console_verbosity
         log_console_verbosity;

      attrControlGrp -label "File Verbosity Level"
         -attribute defaultArnoldRenderOptions.log_file_verbosity
         log_file_verbosity;

      setParent ..;

   setUITemplate -popTemplate;
}

global proc CreateArnoldRendererGlobalsTab()
{
   // Make sure the ArnoldRenderOptions node exists
   createNode -skipSelect -shared -n "defaultArnoldRenderOptions" ArnoldRenderOptions;
   
   string $parentForm = `setParent -query`;

   setUITemplate -pushTemplate attributeEditorTemplate;
   scrollLayout -horizontalScrollBarThickness 0 arnoldGlobalsScrollLayout;
      columnLayout -adjustableColumn true arnoldTabColumn;
      
         // Sampling
         //
         frameLayout -label "Sampling" -cll true -cl 0 arnoldSamplingSettings;
            CreateArnoldSamplingSettings;
            setParent ..;
            
         // Ray depth
         //
         frameLayout -label "Ray Depth" -cll true -cl 0 arnoldRayDepthSettings;
            CreateArnoldRayDepthSettings;
            setParent ..;
         
         // Environment
         //
         frameLayout -label "Environment" -cll true -cl 1 arnoldEnvironmentSettings;
            CreateArnoldEnvironmentSettings;
            setParent ..;
         
         // Motion Blur
         //
         frameLayout -label "Motion Blur" -cll true -cl 1 arnoldMotionBlurSettings;
            CreateArnoldMotionBlurSettings;
            setParent ..;
         
         // Subsurface scattering
         //
         frameLayout -label "Subsurface scattering" -cll true -cl 1 arnoldSSSSettings;
            CreateArnoldSSSSettings;
            setParent ..;

         // Subdivision Surfaces
         //
         frameLayout -label "Subdivision" -cll true -cl 1 arnoldSubdivSettings;
            CreateArnoldSubdivSettings;
            setParent ..;
         
         // Render
         //
         frameLayout -label "Render Settings" -cll true -cl 1 arnoldRenderSettings;
            CreateArnoldRenderSettings;
            setParent ..;
         
         // Gamma correction
         //
         frameLayout -label "Gamma Correction" -cll true -cl 1 arnoldGammaSettings;
            CreateArnoldGammaSettings;
            setParent ..;
         
         // Log
         //
         frameLayout -label "Log" -cll true -cl 1 arnoldLogSettings;
            CreateArnoldLogSettings;
            setParent ..;
         
         setParent ..;

      formLayout -edit
         -af arnoldGlobalsScrollLayout "top" 0
         -af arnoldGlobalsScrollLayout "bottom" 0
         -af arnoldGlobalsScrollLayout "left" 0
         -af arnoldGlobalsScrollLayout "right" 0
         $parentForm;
     
      setParent $parentForm;
   
   UpdateArnoldRendererGlobalsTab();
}

global proc UpdateArnoldRendererGlobalsTab()
{
   UpdateRenderSettings();
   UpdateSamplingSettings();
   UpdateMotionBlurSettings();
   UpdateLogSettings();
}
