# vim: filetype=python

import system, os
from build_tools import find_files_recursive
Import('ext_env')
##############################################################
## COMMON ENV
common_env = ext_env.Clone()

BUILD_BASE_DIR = common_env['BUILD_BASE_DIR']
ROOT_DIR = common_env['ROOT_DIR']

mayaRoot = common_env['MAYA_ROOT']
if system.os() == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

if system.os() !='windows':
    common_env.Append(CCFLAGS = Split('-fvisibility=hidden -std=c++0x')) # hide symbols by default

ext_base_dir = os.path.join(common_env['ROOT_DIR'], 'contrib', 'extensions', 'bifrost')

def setup(env, library):
    '''Adds the include paths, lib paths and libs to the given environment for the given library.'''
    def addLib(env, lib):
        env.Append(LIBS=Split(lib + ('.lib' if system.os() =='windows' else '')))

    def addBifrostApi(env):

        maya_version = env['MAYA_VERSION']

        if int(maya_version) >= 201800:
            env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'include', 'modules')])
        else:
            env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'include', 'modules', 'bifrostapi', 'api')])
        env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'include', 'modules', 'bifrostcore', 'api')])
        env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'include', 'modules', 'aminomath', 'api')])

        if system.os() == 'darwin' and int(maya_version) < 201800:
            env.Append(LIBPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'bin')])
        else:
            env.Append(LIBPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'lib')])

        bifrostLib = 'bifrostapi'
        if int(maya_version) >= 201800:
            bifrostLib = bifrostLib + '_1_0'

        env.Append(LIBS=Split(bifrostLib + ('.lib' if system.os() =='windows' else '')))

    def addBifrostRenderCore(env):
        # TEMPORARY
        env.Append(CPPPATH = [os.path.join(ROOT_DIR, 'contrib', 'extensions', 'bifrost', 'bifrostrendercore', 'api')])
        env.Append(LIBPATH = [os.path.join(ROOT_DIR, BUILD_BASE_DIR, 'bifrost')])
        env.Append(LIBS=Split('bifrostrendercore' + ('.lib' if system.os() =='windows' else '')))
        #env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'include', 'plugins', 'bifrostrendercore', 'api')])
        #env.Append(LIBPATH = [os.path.join(mayaRoot, 'plug-ins', 'bifrost', 'bin' if system.os() == 'darwin' else 'lib')])
        #env.Append(LIBS=Split('bifrostrendercore' + ('.lib' if system.os() =='windows' else '')))

    def addAi(env):
        env.Append(LIBS=Split('ai' + '.lib' if system.os() =='windows' else ''))

    def addMtoa(env):
        env.Append(LIBS=Split('mtoa_api' + '.lib' if system.os() =='windows' else ''))

    libToEnvSetup = {
        "bifrostapi" : addBifrostApi,
        "bifrostrendercore" : addBifrostRenderCore,
        "ai" : addAi,
        "mtoa_api" : addMtoa
    }[library](env)

setup(common_env, "ai")
setup(common_env, "mtoa_api")


##############################################################
####  BIFROST RENDER CORE LIBRARY
# TEMPORARY
local_env = common_env.Clone()
if system.os() !='windows':
    local_env.Append(CCFLAGS = Split('-fPIC'))
setup(local_env, "bifrostapi")
# Automatically add all source and include files found in the source path
local_env.Append(CPPDEFINES = Split('BIFROSTRENDERAPI') )
src_base_dir  = os.path.join(ext_base_dir, 'bifrostrendercore')
local_env.Append(CPPPATH = os.path.join(src_base_dir, 'api'))
source_files  = [os.path.join(src_base_dir, x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
BRC_INSTALL_DIR = os.path.join(ROOT_DIR, BUILD_BASE_DIR, 'bifrost', 'bifrostrendercore')
BIFROST_RENDERCORE = local_env.SharedLibrary(target='bifrostrendercore', source=source_files, LIBPREFIX='')

##############################################################
####  BIFROST TRANSLATORS

local_env = common_env.Clone()
setup(local_env, "bifrostapi")
setup(local_env, "bifrostrendercore")
# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(ext_base_dir, 'plugin')
local_env.Append(CPPPATH = os.path.join(src_base_dir, 'include'))
source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]

EXT = local_env.StaticLibrary('bifrostTranslator', source_files, LIBPREFIX= ('lib' if system.os() =='windows' else ''))

Depends(EXT, BIFROST_RENDERCORE)

###########################################################3
#### BIFROST SHADERS

Import('ext_env')
local_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(ext_base_dir, 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
EXT_SHADERS = local_env.SharedLibrary('bifrost_shaders', source_files, LIBPREFIX='')


##########################################################
## BIFROST PROCEDURALS

local_env = common_env.Clone()
setup(local_env, "bifrostapi")
setup(local_env, "bifrostrendercore")
src_base_dir  = os.path.join(ext_base_dir, 'procedural')
source_files  = [os.path.join('procedural', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
local_env.Append(CPPPATH = [os.path.join(ROOT_DIR, 'contrib', 'extensions', 'bifrost', 'procedural', 'common', 'include')])
EXT_PROCS = local_env.SharedLibrary('bifrost_procedurals', source_files, LIBPREFIX='')

Depends(EXT_PROCS, BIFROST_RENDERCORE)

Return('EXT EXT_SHADERS EXT_PROCS')
