import utils.system as system
import os
from utils.build_tools import find_files_recursive

# import build env
Import('ext_env')
local_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'contrib', 'extensions', 'extensionTest', 'plugin')

source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = local_env['MAYA_ROOT']
if system.os == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

local_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])

if system.os =='windows':
   local_env.Append(CPPPATH = ['.'])   
   local_env.Append(LIBS=Split('ai.lib'))
else:
   local_env.Append(CPPPATH = ['.'])
   local_env.Append(LIBS=Split('ai'))
   local_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

EXT = local_env.SharedLibrary('mtoaTestTranslator', source_files, LIBPREFIX='')

###########################################################3
#### XGEN SHADERS
# import build env
Import('env')
shader_env = env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(shader_env['ROOT_DIR'], 'contrib', 'extensions', 'extensionTest', 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.h'])]

if system.os =='windows':
   shader_env.Append(CPPPATH = ['.'])   
   shader_env.Append(LIBS=Split('ai.lib'))
else:
   shader_env.Append(CPPPATH = ['.'])
   shader_env.Append(LIBS=Split('ai'))
   shader_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

EXT_SHADERS = shader_env.SharedLibrary('mtoaTest_shaders', source_files, LIBPREFIX='')

##########################################################
## XGEN  PROCEDURAL
# import build env
Import('env')
proc_env = env.Clone()

src_base_dir  = os.path.join(proc_env['ROOT_DIR'], 'contrib', 'extensions', 'extensionTest','procedural')
source_files  = [os.path.join('procedural', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('procedural', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = proc_env['MAYA_ROOT']
if system.os == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

if system.os =='windows':
    proc_env.Append(CPPPATH = ['.'])   
    proc_env.Append(LIBS=Split('ai.lib'))
else:
    proc_env.Append(CPPPATH = ['.'])
    proc_env.Append(LIBS=Split('ai'))
    proc_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default
    if system.os == 'darwin':
        proc_env.Append(CCFLAGS = Split('-stdlib=libc++'))
        proc_env.Append(LINKFLAGS = Split('-lc++'))

EXT_PROCS = proc_env.SharedLibrary('mtoaTest_procedural', source_files, LIBPREFIX='')
EXT_PROCS.target_type = 'shader'

Return('EXT EXT_SHADERS EXT_PROCS')
