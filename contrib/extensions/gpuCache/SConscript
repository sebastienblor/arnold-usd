# vim: filetype=python

import utils.system as system
import os
from utils.build_tools import find_files_recursive
from utils.mtoa_build_tools import get_library_extension

Import('ext_env')

local_env = ext_env.Clone()

BUILD_BASE_DIR = local_env['BUILD_BASE_DIR']
ROOT_DIR = local_env['ROOT_DIR']

mayaRoot = local_env['MAYA_ROOT']
if system.os == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

if system.os !='windows':
    local_env.Append(CCFLAGS = Split('-fvisibility=hidden -std=c++0x')) # hide symbols by default

if system.os == 'windows' and local_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"  # Enable writing pdb files for OPT builds
    MSVC_FLAGS += " /FS"  # Enable parallel writing into pdb files
    MSVC_FLAGS += " /Fdbuild\gpuCacheTranslator.pdb"
    local_env.Append(CCFLAGS = Split(MSVC_FLAGS))

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(ROOT_DIR, 'contrib', 'extensions', 'gpuCache', 'plugin')
source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
EXT = local_env.SharedLibrary('gpuCacheTranslator', source_files, LIBPREFIX= '')

if (system.os == 'windows'):
    EXT = [EXT[0]]

Return('EXT')
