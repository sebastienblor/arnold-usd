# vim: filetype=python

import system, os
from build_tools import find_files_recursive

##############################################################3
####  XGEN TRANSLATOR
# import build env
Import('ext_env')
local_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'contrib', 'extensions', 'xgen', 'plugin')

source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = local_env['MAYA_ROOT']
if system.os() == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

local_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])

if system.os() =='windows':
   local_env.Append(CPPPATH = ['.'])   
   local_env.Append(LIBS=Split('ai.lib'))
else:
   local_env.Append(CPPPATH = ['.'])
   local_env.Append(LIBS=Split('ai'))
   local_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

EXT = local_env.SharedLibrary('xgenTranslator', source_files, LIBPREFIX='')

###########################################################3
#### XGEN SHADERS  (currently none)
# import build env
'''
Import('ext_env')
shader_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(shader_env['ROOT_DIR'], 'contrib', 'extensions', 'xgen', 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = shader_env['MAYA_ROOT']
if system.os() == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

shader_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])
shader_env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'include')])
shader_env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'include', 'xgen')])
shader_env.Append(LIBPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'lib')])

if system.os() =='windows':
   shader_env.Append(CPPPATH = ['.'])   
   shader_env.Append(LIBS=Split('ai.lib'))
   shader_env.Append(LIBS=Split('libAdskSeExpr.lib'))
   shader_env.Append(LIBS=Split('libAdskXGen.lib'))
else:
   shader_env.Append(CPPPATH = ['.'])
   shader_env.Append(LIBS=Split('ai'))
   shader_env.Append(LIBS=Split('AdskSeExpr'))
   shader_env.Append(LIBS=Split('AdskXGen'))
   shader_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

EXT_SHADERS = shader_env.SharedLibrary('xgen_shaders', source_files, LIBPREFIX='')
'''

##########################################################
## XGEN  PROCEDURAL
# import build env
Import('env')
proc_env = env.Clone()

src_base_dir  = os.path.join(proc_env['ROOT_DIR'], 'contrib', 'extensions', 'xgen','procedural')
include_files =  [os.path.join('procedural', x) for x in find_files_recursive(src_base_dir, ['.h'])]
source_files  = [os.path.join('procedural', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]

mayaRoot = proc_env['MAYA_ROOT']
if system.os() == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')


proc_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])
proc_env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'include')])
proc_env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'include', 'xgen')])
proc_env.Append(CPPPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'include', 'XGen')])
proc_env.Append(LIBPATH = [os.path.join(mayaRoot, 'plug-ins', 'xgen', 'lib')])

proc_env.Append(CPPDEFINES = Split('_BOOL'))

if system.os() =='windows':
   proc_env.Append(CPPPATH = ['.'])   
   proc_env.Append(LIBS=Split('ai.lib'))
   proc_env.Append(LIBS=Split('libAdskSeExpr.lib'))
   proc_env.Append(LIBS=Split('libAdskXGen.lib'))
else:
   proc_env.Append(CPPPATH = ['.'])
   proc_env.Append(LIBS=Split('ai'))
   proc_env.Append(LIBS=Split('AdskSeExpr'))
   proc_env.Append(LIBS=Split('AdskXGen'))
   proc_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

EXT_PROCS = proc_env.SharedLibrary('xgen_procedural', source_files, LIBPREFIX='')
EXT_PROCS.target_type = 'procedural'

#Return('EXT EXT_SHADERS EXT_PROCS')
Return('EXT EXT_PROCS')
