# vim: filetype=python

import system, os
from build_tools import find_files_recursive

# import build env
Import('ext_env')
local_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'contrib', 'extensions', 'shave', 'plugin')

source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.h'])]

EXT = local_env.SharedLibrary('shave', source_files, LIBPREFIX='')

if system.os() == 'windows':
   local_env.Append(LIBS=Split('libShaveAPI.lib'))
   local_env['MSVSSCONSCRIPT'] = local_env.File('SConscript')   
else:
   # If a shave API path is passed, use that. Otherwise assume it's on the path.
   if local_env.has_key("SHAVE_API"):
      local_env.Append(CPPPATH = [os.path.join(local_env["SHAVE_API"], 'include')])
      local_env.Append(LIBPATH = [os.path.join(local_env["SHAVE_API"], 'lib')])

   local_env.Append(CPPPATH = ['.'])
   local_env.Append(LIBPATH = ['.'])
   local_env.Append(LIBS=['ShaveAPI', 'mtoa_api'])


# import build env
Import('env')
shader_env = env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(shader_env['ROOT_DIR'], 'contrib', 'extensions', 'shave', 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.h'])]

if system.os() =='windows':
   shader_env.Append(CPPPATH = ['.'])
   shader_env.Append(LIBS=Split('ai.lib'))
else:
   shader_env.Append(CPPPATH = ['.'])
   shader_env.Append(LIBS=Split('ai'))
   shader_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default


EXT_SHADERS = shader_env.SharedLibrary('shave_shaders', source_files, LIBPREFIX='')

if system.os() == 'windows':
   shader_env['MSVSSCONSCRIPT'] = shader_env.File('SConscript')

Return('EXT EXT_SHADERS')
