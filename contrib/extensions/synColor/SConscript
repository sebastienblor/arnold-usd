# vim: filetype=python

import utils.system as system
import os
from utils.build_tools import find_files_recursive
import glob
import subprocess
from utils.mtoa_build_tools import get_library_extension, get_library_prefix

# import build env
Import('ext_env')
plugin_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(plugin_env['ROOT_DIR'], 'contrib', 'extensions', 'synColor', 'plugin')
source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.h'])]

plugin_env.Append(CPPPATH = ['.'])
if system.os == 'windows' and plugin_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"
    MSVC_FLAGS += " /FS"
    MSVC_FLAGS += " /Fd"+plugin_env['BUILD_BASE_DIR']+"\\synColorTranslator_tmp.pdb"
    plugin_env.Append(CCFLAGS = Split(MSVC_FLAGS))

EXT = plugin_env.SharedLibrary('synColorTranslator', source_files, LIBPREFIX='')

if system.os == 'windows':
   plugin_env['MSVSSCONSCRIPT'] = plugin_env.File('SConscript')

maya_version_base = plugin_env['MAYA_VERSION_BASE']

if int(maya_version_base) >= 2024:
    if (system.os == 'windows'):
        EXT = [EXT[0]]
    Return('EXT')

# import build env
Import('env')
shader_env = env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(shader_env['ROOT_DIR'], 'contrib', 'extensions', 'synColor', 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = shader_env['MAYA_ROOT']
if system.os == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

shader_env.Append(CPPPATH = ['.'])

# Add the syncolor paths
syncolor_include_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor', 'include')
syncolor_library_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor', 'lib', system.os)


shader_env.Append(CPPPATH = [syncolor_include_path])
shader_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])

shader_env.Append(LIBPATH = [syncolor_library_path])

if system.os == 'windows' and shader_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"
    MSVC_FLAGS += " /FS"
    MSVC_FLAGS += " /Fd"+shader_env['BUILD_BASE_DIR']+"\\synColor_shaders_tmp.pdb"
    plugin_env.Append(CCFLAGS = Split(MSVC_FLAGS))

# Add platform specific paths
if system.os =='windows':
   shader_env.Append(LIBS=Split('ai.lib'))
   shader_env.Append(LIBS=Split('synColor.lib'))
else:
   shader_env.Append(LIBS=Split('ai'))
   shader_env.Append(CCFLAGS = Split('-fvisibility=hidden')) # hide symbols by default

   synColorLibs = glob.glob(syncolor_library_path + "/"+ get_library_prefix() + "synColor*"+get_library_extension())

   for syncolorFile in synColorLibs:
      syncolorFile = os.path.basename(syncolorFile)
      extLength = -len(get_library_extension())
      syncolorFile = syncolorFile[3:extLength]
      shader_env.Append(LIBS=Split(syncolorFile))


EXT_SHADERS = shader_env.SharedLibrary('synColor_shaders', source_files, LIBPREFIX='')

def osx_hardcode_path(target, source, env):
   cmd = " install_name_tool -add_rpath @loader_path/../bin/"
   if cmd:
      p = subprocess.Popen(cmd + " " + str(target[0]), shell=True)
      retcode = p.wait()
      return 0

if system.os == 'windows':
   shader_env['MSVSSCONSCRIPT'] = shader_env.File('SConscript')

if system.os == 'linux':
   shader_env.Append(RPATH = shader_env.Literal(os.path.join('\\$$ORIGIN', '..', 'bin')))

if system.os == 'darwin':
   env.AddPostAction(EXT_SHADERS, Action(osx_hardcode_path, 'Adjusting paths in synColor shader...'))

Return('EXT EXT_SHADERS')
