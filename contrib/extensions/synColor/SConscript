# vim: filetype=python

import system, os
from build_tools import find_files_recursive
import glob

# import build env
Import('ext_env')
plugin_env = ext_env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(plugin_env['ROOT_DIR'], 'contrib', 'extensions', 'synColor', 'plugin')
source_files  = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('plugin', x) for x in find_files_recursive(src_base_dir, ['.h'])]

plugin_env.Append(CPPPATH = ['.'])

EXT = plugin_env.SharedLibrary('synColorTranslator', source_files, LIBPREFIX='')

if system.os() == 'windows':
   plugin_env['MSVSSCONSCRIPT'] = plugin_env.File('SConscript')


# import build env
Import('env')
shader_env = env.Clone()

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(shader_env['ROOT_DIR'], 'contrib', 'extensions', 'synColor', 'shaders')
source_files  = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.c', '.cpp'])]
include_files = [os.path.join('shaders', x) for x in find_files_recursive(src_base_dir, ['.h'])]

mayaRoot = shader_env['MAYA_ROOT']
if system.os() == 'darwin':
    mayaRoot = mayaRoot.replace('Maya.app/Contents', '')
    mayaRoot = mayaRoot.replace('//', '/')

shader_env.Append(CPPPATH = ['.'])

# Add the syncolor paths
syncolor_include_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor', 'include')
syncolor_partial_library_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor', 'lib')
maya_version = shader_env['MAYA_VERSION']
if int(maya_version) >= 201800:
   syncolor_include_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor_2018', 'include')
   syncolor_partial_library_path = os.path.join(shader_env['ROOT_DIR'], 'external', 'synColor_2018', 'lib')

shader_env.Append(CPPPATH = [syncolor_include_path])
shader_env.Append(CPPPATH = [os.path.join(mayaRoot, 'include')])

# Add platform specific paths
if system.os() =='windows':
   shader_env.Append(LIBS=Split('ai.lib'))
   shader_env.Append(LIBS=Split('synColor.lib'))

   library_path = os.path.join(syncolor_partial_library_path, 'windows')

   shader_env.Append(LIBPATH = [library_path])

else:
   shader_env.Append(LIBS=Split('ai'))
   shader_env.Append(LIBS=Split('synColor'))

   shader_env.Append(CCFLAGS = Split('-fvisibility=hidden  -std=c++0x')) # hide symbols by default
   if system.os() =='darwin':
      shader_env.Append(LIBPATH = [os.path.join(syncolor_partial_library_path, 'darwin')])
   else:
      shader_env.Append(LIBPATH = [os.path.join(syncolor_partial_library_path, 'linux')])

EXT_SHADERS = shader_env.SharedLibrary('synColor_shaders', source_files, LIBPREFIX='')

if system.os() == 'windows':
   shader_env['MSVSSCONSCRIPT'] = shader_env.File('SConscript')

if system.os() == 'linux':
   shader_env.Append(RPATH = shader_env.Literal(os.path.join('\\$$ORIGIN', '..', 'bin')))

Return('EXT EXT_SHADERS')
