# vim: filetype=python

import sys, os
import SCons.Action
import subprocess

# first extend path
sys.path = [os.path.join('..',
                         'external',
                         'arnold-renderview',
                         'tools',
                         'python')] + sys.path
# now we can import system
import system
## load our own python modules
##import utils.system as system
from utils.build_tools import find_files_recursive

# import build env
Import('maya_env')
local_env = maya_env.Clone()
_targetPath = local_env.Dir('.')
globals()['MTOA_ARV'] = []

# source and include files
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-renderview')
icons_dir  = os.path.join(local_env['ROOT_DIR'], 'icons')
source_files = [os.path.join(src_base_dir, f) for f in find_files_recursive(src_base_dir, ['.c', '.cpp']) if not f.startswith('glcontext_guard')]
include_files = [f for f in find_files_recursive(src_base_dir, ['.h']) if not f.startswith('glcontext_guard')]
resource_files = [f for f in find_files_recursive(icons_dir, ['.qrc'])]
print('DEBUG: %s' % src_base_dir)

if system.os() == 'darwin':
    source_files += Split('glcontext_guard_mac.mm')
else:
    source_files += Split(os.path.join(src_base_dir, 'glcontext_guard.cpp'))

mtoa_arv_folder = _targetPath.abspath

def _mtoa_arv(target, source, env):
    arv_env = env.Clone()
    # TODO
    print('DEBUG: target = %s' % target[0])
    print('DEBUG: source = %s' % source)
    print('DEBUG: env = %s' % env.Dump())
    args = dict(
        ARNOLD = local_env['ARNOLD'],
        SHOW_CMDS = env['SHOW_CMDS'],
        CXX = env['CXX'],
        SHCXX = env['SHCXX'],
    )
    arv_project = env.Dir(os.path.join(env['ROOT_DIR'], env['EXTERNAL_PATH'], 'arnold-renderview')).abspath
    arv_scons = os.path.join(arv_project, '3rdparty', 'scons', 'scons.py')
    args = ['-B', arv_scons, '-j', '1'] + ['{}={}'.format(k, v) for k, v in args.items()]
    print('DEBUG: sys.executable = %s' % sys.executable)
    print('DEBUG: args = %s' % args)
    sub = subprocess.Popen([sys.executable] + args, cwd=arv_project)
    sub.communicate()
    if sub.returncode != 0:
        raise SCons.Errors.UserError('Error building arnold-renderview subrepository!')
    return None

mtoa_arv_action_log = 'Building MTOA ARV ...'
mtoa_arv_action  = SCons.Action.Action(_mtoa_arv, mtoa_arv_action_log)
MTOA_ARV = local_env.Command(mtoa_arv_folder, [], mtoa_arv_action)
local_env.Alias('mtoa_arv', MTOA_ARV)

Return('MTOA_ARV')
