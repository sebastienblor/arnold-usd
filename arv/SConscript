# vim: filetype=python

import sys, os
import SCons.Action
import subprocess

# import build env
Import('maya_env')
local_env = maya_env.Clone()
_targetPath = local_env.Dir('.')
globals()['MTOA_ARV'] = []

# let's get the base/root directory first
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-renderview')
# extend the module path to load our own modules
py_tools_dir = os.path.join(src_base_dir,
                            'tools',
                            'python')
if py_tools_dir not in sys.path:
    sys.path = [py_tools_dir] + sys.path
# load our own python modules
import system
from utils.build_tools import find_files_recursive

# source and include files
icons_dir  = os.path.join(local_env['ROOT_DIR'], 'icons')
source_files = [os.path.join(src_base_dir, f) for f in find_files_recursive(src_base_dir, ['.c', '.cpp']) if not f.startswith('glcontext_guard')]
include_files = [f for f in find_files_recursive(src_base_dir, ['.h']) if not f.startswith('glcontext_guard')]
resource_files = [f for f in find_files_recursive(icons_dir, ['.qrc'])]

if system.os() == 'darwin':
    source_files += Split('glcontext_guard_mac.mm')
else:
    source_files += Split(os.path.join(src_base_dir, 'glcontext_guard.cpp'))

mtoa_arv_folder = _targetPath.abspath

def _mtoa_arv(target, source, env):
    arv_env = env.Clone()
    args = dict(
        ARNOLD = env['ARNOLD'],
        SHOW_CMDS = env['SHOW_CMDS'],
        CC = env['CC'],
        CXX = env['CXX'],
        SHCCC = env['SHCC'],
        SHCXX = env['SHCXX'],
        QT_LIB_PATH = env['QT_LIB_PATH'],
        QT_INCLUDE_PATH = env['QT_INCLUDE_PATH'],
        RV_OCIO = env['RV_OCIO'],
        RV_SYNCOLOR = env['RV_SYNCOLOR'],
        INSTALL_DIR = mtoa_arv_folder,
    )
    arv_project = env.Dir(os.path.join(env['ROOT_DIR'], env['EXTERNAL_PATH'], 'arnold-renderview')).abspath
    arv_scons = os.path.join(arv_project, '3rdparty', 'scons', 'scons.py')
    args = ['-B', arv_scons, 'install', '-j', '1'] + ['{}={}'.format(k, v) for k, v in args.items()]
    sub = subprocess.Popen([sys.executable] + args, cwd=arv_project)
    sub.communicate()
    if sub.returncode != 0:
        raise SCons.Errors.UserError('Error building arnold-renderview subrepository!')
    return None

mtoa_arv_action_log = 'Building MTOA ARV ...'
mtoa_arv_action  = SCons.Action.Action(_mtoa_arv, mtoa_arv_action_log)
MTOA_ARV = local_env.Command(os.path.join(mtoa_arv_folder, 'libai_renderview.so'), [], mtoa_arv_action)
local_env.Alias('mtoa_arv', MTOA_ARV)

Return('MTOA_ARV')
