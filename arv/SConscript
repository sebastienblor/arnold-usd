import os, re
import platform
import sys
import SCons.Action
import subprocess

import utils as sa

# vim: filetype=python

## load our own python modules
import utils.system as system
from utils.build_tools import find_files_recursive


# import build env
Import('maya_env')
local_env = maya_env.Clone()
_targetPath = local_env.Dir('.')
globals()['ARNOLD_RENDERVIEW'] = []

pythonVersion = '3'
if local_env.get('MTOA_USD_PYTHON'):
    pythonVersion = local_env['MTOA_USD_PYTHON']

# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-renderview')
source_files  = find_files_recursive(src_base_dir, ['.c', '.cpp'])
include_files = find_files_recursive(src_base_dir, ['.h'])

mayaRoot = local_env['MAYA_ROOT']
mayaVersion = int(local_env['MAYA_VERSION_BASE'])

lib_extension = {'darwin' : '.dylib' , 'linux'  : '.so' , 'windows': '.dll'}.get(platform.system().lower(), None)
lib_prefix = {'windows' : ''}.get(system.os, '')
lib_suffix = {'darwin' : '.dylib', 'linux'  : '.so', 'windows': '.dll'}.get(system.os)

usd_supported_modes = ['opt', 'debug', 'profile']

arnold_renderview_folder = _targetPath.abspath

def _arnold_renderview(target, source, env):
    usd_env = env.Clone()
    #########
    args = dict(
      COMPILER            = 'msvc' if system.is_windows else local_env['COMPILER'],
      ARNOLD              = local_env['ARNOLD'],
      MODE                = local_env['MODE'],
      WARN_LEVEL          ='warn-only',
      MSVC_VERSION        ='14.1' if mayaVersion <= 2023 else '14.2',
      CXX_STANDARD        ='14',
      QT_VERSION          = '5.15.2',
      QT_LIB_PATH         = os.path.join(mayaRoot, 'lib'),
      QT_INCLUDE_PATH     = local_env['QT_ROOT_DIR'],
      RV_OCIO             = True,
      RV_SYNCOLOR         = False,
      SHOW_CMDS         = True,
      INSTALL_DIR        = arnold_renderview_folder,
    )
    if platform.system().lower() == 'darwin':
        args['SDK_PATH']          = local_env['SDK_PATH']
        args['SDK_VERSION']       = local_env['SDK_VERSION']
        args['MACOS_VERSION_MIN'] = local_env['MACOS_VERSION_MIN']
        args['PYTHON_LIB_NAME']   = 'libpython{}.{}'.format(pythonVersion, pythonMinor)
        args['MACOS_ARCH']        = local_env['TARGET_ARCH']

    if platform.system().lower() == 'linux':
        if local_env.get('SHCXX'):
            args['SHCXX'] = local_env['SHCXX']
        if local_env.get('CXX_STANDARD'):
            args['CXX_STANDARD'] = local_env['CXX_STANDARD']
        if local_env.get('LIBPATH'):
            args['LIBPATH'] = local_env['LIBPATH']
        
        # don't set this flag for 2024 and up, as it won't load in RH8 #MTOA-1215
        if mayaVersion < 2024:
            args['DISABLE_CXX11_ABI']=True 
    
    build_dir = 'build_arv_{}'.format(mayaVersion)
    args['BUILD_DIR'] = build_dir

    renderview_project = env.Dir(os.path.join(env['ROOT_DIR'], env['EXTERNAL_PATH'], 'arnold-renderview')).abspath
    if not os.path.exists(renderview_project):
        raise SCons.Errors.UserError('arnold-renderview subrepository not found')

    renderview_scons = os.path.join(renderview_project, '3rdparty', 'scons', 'scons.py')
    if not os.path.exists(renderview_scons):
        raise SCons.Errors.UserError('arnold-renderview scons file not found')

    renderview_scons_site = os.path.join(renderview_project, 'tools', 'site_scons')
    # Note that these builds should run with a single thread, since MtoA's Scons is already running this job in parallel with others #MTOA-869
    cmd_args = ['-B', renderview_scons, '--site-dir={}'.format(renderview_scons_site), 'install', '-j', '1'] + ['{}={}'.format(k, v) for k, v in args.items()]

    # Append the mayapy bin path to the system PATH, so that running "usdGenSchema_cmd" will work
    env_separator = ';' if platform.system().lower() == 'windows' else ':'
    local_env.AppendENVPath('PATH', os.path.join(local_env['MAYA_ROOT'], 'bin'), envname='ENV', sep=env_separator, delete_existing=1)
    os.environ['PATH'] += env_separator + os.path.join(local_env['MAYA_ROOT'], 'bin')
    os.putenv('PATH', os.environ['PATH'])
    print(cmd_args)
    sub = subprocess.Popen([sys.executable] + cmd_args, cwd=renderview_project)
    sub.communicate()
    if sub.returncode != 0:
        raise SCons.Errors.UserError('Error building arnold-usd subrepository!')

    return None


arv_action_log = 'Building ARV  '
arv_action_log += '....'
arnold_renderview_action  = SCons.Action.Action(_arnold_renderview    , arv_action_log)
ARNOLD_RENDERVIEW = local_env.Command(arnold_renderview_folder, [], arnold_renderview_action  )
local_env.Alias('arnold_renderview', ARNOLD_RENDERVIEW)

Return('ARNOLD_RENDERVIEW')
