import os, re
import platform
import sys
import SCons.Action
import subprocess
import shutil

import utils as sa

# vim: filetype=python

## load our own python modules
import utils.system as system
from utils.build_tools import find_files_recursive


# import build env
Import('maya_env')
local_env = maya_env.Clone()
_targetPath = local_env.Dir('.')
globals()['MAYAUSD_REGISTRY'] = []

if not os.path.exists(_targetPath.abspath):
    os.makedirs(_targetPath.abspath)

build_writer_dir = os.path.join(_targetPath.abspath, 'writer')
if not os.path.exists(build_writer_dir):
    os.makedirs(build_writer_dir)

build_common_dir = os.path.join(_targetPath.abspath, 'common')
if not os.path.exists(build_common_dir):
    os.makedirs(build_common_dir)

pythonVersion = '3'
if local_env.get('MTOA_USD_PYTHON'):
    pythonVersion = local_env['MTOA_USD_PYTHON']

mayaRoot = local_env['MAYA_ROOT']

lib_extension = {'darwin' : '.dylib' , 'linux'  : '.so' , 'windows': '.dll'}.get(platform.system().lower(), None)
lib_prefix = {'windows' : ''}.get(system.os, '')
lib_suffix = {'darwin' : '.dylib', 'linux'  : '.so', 'windows': '.dll'}.get(system.os)

usd_install_dir = local_env['USD_PATH']
usd_lib_dir = os.path.join(usd_install_dir, 'lib')

usd_supported_modes = ['opt', 'debug', 'profile']

usd_include_dir = os.path.join(usd_install_dir, 'include')
boost_lib = os.path.join(usd_install_dir, 'lib')
usd_lib_prefix = 'lib'

if system.os == 'windows' and local_env['MODE'] == 'opt':
    MSVC_FLAGS = " /Zi"
    MSVC_FLAGS += " /FS"
    MSVC_FLAGS += " /Fd"+local_env['BUILD_BASE_DIR']+"\\mayaUsdRegistry_tmp.pdb"
    local_env.Append(CCFLAGS = Split(MSVC_FLAGS))

mayaRoot = local_env['MAYA_ROOT']
mayaVersion = int(local_env['MAYA_VERSION_BASE'])

# For Maya 2022, python3 means python3.7
# For Maya 2023, it is python3.9
pythonMinor = '7' if mayaVersion < 2023 else '9'
pythonDirChar = 'm' if mayaVersion < 2023 else ''

if platform.system().lower() == 'darwin':
    python_include = os.path.join(mayaRoot, 'Frameworks', 'Python.framework', 'Versions', '{}.{}'.format(pythonVersion, pythonMinor), 'include', 'python{}.{}{}'.format(pythonVersion, pythonMinor, pythonDirChar))
    python_lib = os.path.join(mayaRoot, 'Frameworks', 'Python.framework', 'Versions', '{}.{}'.format(pythonVersion, pythonMinor), 'lib')
    
else:
    python_include = os.path.join(local_env['MAYA_INCLUDE_PATH'], 'Python{}{}'.format(pythonVersion, pythonMinor), 'Python')
    python_lib = os.path.join(mayaRoot, 'lib')

if platform.system().lower() == 'windows':
    boost_include = os.path.join(usd_install_dir, 'include', 'boost-1_70')
    boost_lib_name = 'boost_%s{}{}-vc141-mt-x64-1_70'.format(pythonVersion, pythonMinor)
    usd_lib_prefix = ''
else:
    boost_include = os.path.join(usd_install_dir, 'include', 'boost')
    if pythonVersion == '2' and platform.system().lower() == 'linux':
        boost_lib_name = 'boost_%s'
    else:
        boost_lib_name = 'boost_%s{}{}'.format(pythonVersion, pythonMinor)

if not os.path.exists(python_include):
    print("Python includes not found %s"% python_include)
if not os.path.exists(python_lib):
    print("Python libs not found %s"% python_lib)
if not os.path.exists(boost_include):
    print("Boost includes not found %s"% boost_include)
if not os.path.exists(usd_include_dir):
    print("USD includes not found %s"% usd_include_dir)

###### Now Maya USD registry 

src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'usd')

include_files = []
source_files = ['UsdArnoldNodeWriter.cpp']

writer_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-usd', 'translator', 'writer')
writer_srcs = find_files_recursive(writer_dir, ['.c', '.cpp'])
writer_includes = find_files_recursive(writer_dir, ['.h'])


for writer_src in writer_srcs:
    shutil.copyfile(os.path.join(writer_dir, writer_src), os.path.join(build_writer_dir, writer_src))
    source_files.append(os.path.join(build_writer_dir, writer_src))
for writer_include in writer_includes:
    include_files.append(os.path.join(writer_dir, writer_include))

common_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-usd', 'common')
common_srcs = find_files_recursive(common_dir, ['.c', '.cpp'])
common_includes = find_files_recursive(common_dir, ['.h'])

for common_src in common_srcs:
    shutil.copyfile(os.path.join(common_dir, common_src), os.path.join(build_common_dir, common_src))
    source_files.append(os.path.join(build_common_dir, common_src))
for common_include in common_includes:
    include_files.append(os.path.join(common_dir, common_include))


mtoa_include = os.path.join(local_env['ROOT_DIR'], 'plugins', 'mtoa')

local_env.Append(CPPPATH = [usd_include_dir, boost_include, python_include, writer_dir, common_dir, mtoa_include])
local_env.Append(LIBPATH = [usd_lib_dir, python_lib, boost_lib])

local_env.Append(CPPDEFINES = Split('BOOST_PYTHON_NO_LIB'))
local_env['BOOST_LIB_NAME']=boost_lib_name

usd_libs = [
        'arch',
        'sdf',
        'tf',
        'usd',
        'ar',
        'usdGeom',
        'usdShade',
        'usdUtils',
        'vt',
        'gf',
        'usdLux',
        'usdVol',
        'usdSkel',
        'usdRender'        
    ]

local_env.Append(LIBS = usd_libs)

if platform.system().lower() == 'darwin':
    local_env['PYTHON_LIB_NAME'] = 'libpython{}.{}'.format(pythonVersion, pythonMinor)
    local_env.Append(LIBS = ['python{}.{}'.format(pythonVersion, pythonMinor), boost_lib_name.replace('%s', 'python')])

if platform.system().lower() == 'linux':
    if pythonVersion == '3':
        local_env['PYTHON_LIB_NAME']   = 'libpython3.{}{}'.format(pythonMinor, pythonDirChar)
    else:
        local_env['PYTHON_LIB_NAME']   = 'libpython2.7'

if platform.system().lower() == 'windows':
    local_env['PYTHON_LIB_NAME']   = 'python{}{}'.format(pythonVersion, pythonMinor)  

local_env.Append(LIBS = [boost_lib_name.replace('%s', 'python')])

MAYAUSD_REGISTRY = local_env.SharedLibrary('mayaUsdRegistry', source_files, LIBPREFIX='')

# Write the file plugInfo.json at the root of the registry folder
plugInfoFile = os.path.join(_targetPath.abspath, 'plugInfo.json')

file = open(plugInfoFile, 'w')
file.write("{\n\t\"Includes\": [ \"*/resources/\" ]\n}")
file.close()

registryResourceFolder = os.path.join(_targetPath.abspath, 'mayaUsdRegistry', 'resources')
if not os.path.exists(registryResourceFolder):
    os.makedirs(registryResourceFolder)
registryResourceFile = os.path.join(registryResourceFolder, 'plugInfo.json')
file = open(registryResourceFile, 'w')

registryResource = "{\n"
registryResource += "\t\"Plugins\": [\n"
registryResource += "\t\t{\n"
registryResource += "\t\t\t\"Info\": {\n"
registryResource += "\t\t\t\t\"UsdMaya\": {\n"
registryResource += "\t\t\t\t\t\"JobContextPlugin\": {},\n"
registryResource += "\t\t\t\t\t\"ShadingModePlugin\": {},\n"
registryResource += "\t\t\t\t\t\"SchemaApiAdaptor\": {\n"
registryResource += "\t\t\t\t\t\t\"providesTranslator\": [\n"
registryResource += "\t\t\t\t\t\t\t\"mesh\", \"curves\", \"directionalLight\", \"pointLight\", \"areaLight\", \"camera\"]\n"
registryResource += "\t\t\t\t\t}\n"
registryResource += "\t\t\t\t}\n"
registryResource += "\t\t\t},\n"
registryResource += "\t\t\t\"LibraryPath\": \"../"
registryLib = MAYAUSD_REGISTRY
if isinstance(registryLib, SCons.Node.NodeList):
    registryLib = registryLib[0]
registryResource += os.path.basename(str(registryLib))
registryResource += "\",\n\t\t\t\"Name\": \"mayaUsdRegistry\",\n\t\t\t\"ResourcePath\": \"resources\",\n\t\t\t\"Root\": \"..\",\n\t\t\t\"Type\": \"library\"\n\t\t}\n\t]\n}\n"

file.write(registryResource)
file.close()

Return('MAYAUSD_REGISTRY')