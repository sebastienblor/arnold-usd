import os, re
import platform
import sys
import SCons.Action
import subprocess

import utils as sa

# vim: filetype=python

## load our own python modules
import utils.system as system
from utils.build_tools import find_files_recursive


# import build env
Import('maya_env')
local_env = maya_env.Clone()
_targetPath = local_env.Dir('.')
globals()['USD_PROCEDURAL'] = []

pythonVersion = '3'
if local_env.get('MTOA_USD_PYTHON'):
    pythonVersion = local_env['MTOA_USD_PYTHON']


# Automatically add all source and include files found in the source path
src_base_dir  = os.path.join(local_env['ROOT_DIR'], 'external', 'arnold-usd')
source_files  = find_files_recursive(src_base_dir, ['.c', '.cpp'])
include_files = find_files_recursive(src_base_dir, ['.h'])

mayaRoot = local_env['MAYA_ROOT']

lib_extension = {'darwin' : '.dylib' , 'linux'  : '.so' , 'windows': '.dll'}.get(platform.system().lower(), None)
lib_prefix = {'windows' : ''}.get(system.os, '')
lib_suffix = {'darwin' : '.dylib', 'linux'  : '.so', 'windows': '.dll'}.get(system.os)

usd_install_dir = local_env['USD_PATH']
usd_lib_dir = os.path.join(usd_install_dir, 'lib')

usd_supported_modes = ['opt', 'debug', 'profile']

usd_include_dir = os.path.join(usd_install_dir, 'include')
boost_lib = os.path.join(usd_install_dir, 'lib')
usd_lib_prefix = 'lib'

mayaRoot = local_env['MAYA_ROOT']
mayaVersion = int(local_env['MAYA_VERSION_BASE'])
# For Maya 2022, python3 means python3.7
# For Maya 2023, it is python3.9
pythonMinor = '7' if mayaVersion < 2023 else '9'
pythonDirChar = 'm' if mayaVersion < 2023 else ''
if platform.system().lower() == 'darwin':
    python_include = os.path.join(mayaRoot, 'Frameworks', 'Python.framework', 'Versions', '{}.{}'.format(pythonVersion, pythonMinor), 'include', 'python{}.{}{}'.format(pythonVersion, pythonMinor, pythonDirChar))
    python_lib = os.path.join(mayaRoot, 'Frameworks', 'Python.framework', 'Versions', '{}.{}'.format(pythonVersion, pythonMinor), 'lib')
    
else:
    python_include = os.path.join(local_env['MAYA_INCLUDE_PATH'], 'Python{}{}'.format(pythonVersion, pythonMinor), 'Python')
    python_lib = os.path.join(mayaRoot, 'lib')

if platform.system().lower() == 'windows':
    boost_include = os.path.join(usd_install_dir, 'include', 'boost-1_70')
    boost_lib_name = 'boost_%s{}{}-vc141-mt-x64-1_70'.format(pythonVersion, pythonMinor)
    usd_lib_prefix = ''
else:
    boost_include = os.path.join(usd_install_dir, 'include', 'boost')
    if pythonVersion == '2' and platform.system().lower() == 'linux':
        boost_lib_name = 'boost_%s'
    else:
        boost_lib_name = 'boost_%s{}{}'.format(pythonVersion, pythonMinor)

usd_procedural_folder = _targetPath.abspath

if not os.path.exists(python_include):
    print("Python includes not found %s"% python_include)
if not os.path.exists(python_lib):
    print("Python libs not found %s"% python_lib)
if not os.path.exists(boost_include):
    print("Boost includes not found %s"% boost_include)
if not os.path.exists(usd_include_dir):
    print("USD includes not found %s"% usd_include_dir)
    

usd_procedural = os.path.join(usd_procedural_folder, 'usd_cache_proc'+lib_extension)
prefix_folder = 'tmp_proc_{}'.format(local_env.get('USD_VERSION'))
if pythonVersion == '2':
    prefix_folder += '_python2'
def _usd_procedural(target, source, env):
    usd_env = env.Clone()
    #########
    args = dict(
      COMPILER = 'msvc' if system.is_windows else local_env['COMPILER'],
      ARNOLD_PATH         = local_env['ARNOLD'],
      USD_PATH= usd_install_dir,
      USD_BIN= usd_lib_dir,
      TBB_LIB= usd_lib_dir,
      USD_BUILD_MODE = 'shared_libs',
      PREFIX_PROCEDURAL= usd_procedural_folder,
      PREFIX=prefix_folder,
      BUILD_SCHEMAS=False,
      BUILD_RENDER_DELEGATE=False,
      BUILD_USD_WRITER=False,
      BUILD_PROCEDURAL=True,
      BUILD_TESTSUITE=False,
      BUILD_DOCS=False,
      BOOST_LIB= boost_lib,
      BUILD_HOUDINI_TOOLS=False,
      BUILD_NDR_PLUGIN=False,
      BUILD_USD_IMAGING_PLUGIN=False,
      MODE= local_env['MODE'],
      WARN_LEVEL='warn-only',
      MSVC_VERSION='14.1',
      CXX_STANDARD='14',
      BOOST_INCLUDE=boost_include,
      BOOST_LIB_NAME=boost_lib_name,
      PYTHON_INCLUDE=python_include,
      PYTHON_LIB=python_lib,
      USD_LIB_PREFIX=usd_lib_prefix,
      PROC_SCENE_FORMAT=False,
      USD_PROCEDURAL_NAME='usd_cache',
      ENABLE_MATERIALX=True,
    )
    if platform.system().lower() == 'darwin':
        args['SDK_PATH']          = local_env['SDK_PATH']
        args['SDK_VERSION']       = local_env['SDK_VERSION']
        args['MACOS_VERSION_MIN'] = local_env['MACOS_VERSION_MIN']
        args['PYTHON_LIB_NAME']   = 'libpython{}.{}'.format(pythonVersion, pythonMinor)

    if platform.system().lower() == 'linux':
        if local_env.get('SHCXX'):
            args['SHCXX'] = local_env['SHCXX']
        if local_env.get('CXX_STANDARD'):
            args['CXX_STANDARD'] = local_env['CXX_STANDARD']
        args['DISABLE_CXX11_ABI']=True 
        if pythonVersion == '3':
            args['PYTHON_LIB_NAME']   = 'libpython3.{}{}'.format(pythonMinor, pythonDirChar)
        else:
            args['PYTHON_LIB_NAME']   = 'libpython2.7'
    
    if platform.system().lower() == 'windows':
       args['PYTHON_LIB_NAME']   = 'python{}{}'.format(pythonVersion, pythonMinor)  

    build_dir = 'build_proc_{}'.format(local_env.get('USD_VERSION'))
    if pythonVersion == '2':
        build_dir += '_python2'
    args['BUILD_DIR'] = build_dir

    usd_project = env.Dir(os.path.join(env['ROOT_DIR'], env['EXTERNAL_PATH'], 'arnold-usd')).abspath
    if not os.path.exists(usd_project):
        raise SCons.Errors.UserError('arnold-usd subrepository not found')

    usd_scons = os.path.join(usd_project, 'tools', 'scons', 'scons.py')
    if not os.path.exists(usd_scons):
        raise SCons.Errors.UserError('arnold-usd scons file not found')

    usd_scons_site = os.path.join(usd_project, 'tools', 'scons-custom')
    # Note that these builds should run with a single thread, since MtoA's Scons is already running this job in parallel with others #MTOA-869
    args = ['-B', usd_scons, '--site-dir={}'.format(usd_scons_site), 'procedural-install', '-j', '1'] + ['{}={}'.format(k, v) for k, v in args.items()]
   
    sub = subprocess.Popen([sys.executable] + args, cwd=usd_project)
    sub.communicate()
    if sub.returncode != 0:
        raise SCons.Errors.UserError('Error building arnold-usd subrepository!')
    return None

procedural_action_log = 'Building USD {} procedural '.format(local_env.get('USD_VERSION'))
if pythonVersion == '2':
    procedural_action_log += 'for Python 2'
procedural_action_log += '....'

usd_procedural_action  = SCons.Action.Action(_usd_procedural    , procedural_action_log)
USD_PROCEDURAL = local_env.Command(usd_procedural, [], usd_procedural_action  )
local_env.Alias('usd_procedural', USD_PROCEDURAL)

Return('USD_PROCEDURAL')
